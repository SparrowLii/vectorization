// MIR for `hex_encode::hex` before PreCodegen

fn hex_encode::hex() -> () {
    let mut _0: ();                      // return place in scope 0 at hex_encode.rs:1:14: 1:14
    let mut _1: [u8; 32];                // in scope 0 at hex_encode.rs:2:9: 2:16
    let _2: ();                          // in scope 0 at hex_encode.rs:3:5: 3:42
    let mut _3: &[u8];                   // in scope 0 at hex_encode.rs:3:16: 3:31
    let mut _4: &[u8; 3];                // in scope 0 at hex_encode.rs:3:16: 3:31
    let _5: &[u8; 3];                    // in scope 0 at hex_encode.rs:3:16: 3:31
    let mut _6: &mut [u8];               // in scope 0 at hex_encode.rs:3:33: 3:41
    let mut _7: &mut [u8; 32];           // in scope 0 at hex_encode.rs:3:33: 3:41
    let mut _8: &mut [u8; 32];           // in scope 0 at hex_encode.rs:3:33: 3:41
    let mut _9: (&&[u8], &&[u8; 6]);     // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
    let mut _10: &&[u8];                 // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:16: 37:22
    let _11: &[u8];                      // in scope 0 at hex_encode.rs:4:16: 4:25
    let _12: &[u8];                      // in scope 0 at hex_encode.rs:4:17: 4:25
    let mut _13: &[u8; 32];              // in scope 0 at hex_encode.rs:4:17: 4:20
    let mut _14: std::ops::RangeTo<usize>; // in scope 0 at hex_encode.rs:4:21: 4:24
    let mut _15: &&[u8; 6];              // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
    let mut _18: bool;                   // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
    let mut _19: bool;                   // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
    let mut _20: &&[u8];                 // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:22: 39:31
    let mut _21: &&[u8; 6];              // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:35: 39:45
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
    let mut _24: &&[u8];                 // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
    let _25: &&[u8];                     // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
    let mut _26: &&[u8; 6];              // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
    let _27: &&[u8; 6];                  // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
    let mut _28: std::option::Option<std::fmt::Arguments>; // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:85: 44:113
    let mut _30: std::ops::Range<usize>; // in scope 0 at hex_encode.rs:7:14: 7:19
    let mut _31: std::ops::Range<usize>; // in scope 0 at hex_encode.rs:7:14: 7:19
    let mut _33: std::option::Option<usize>; // in scope 0 at hex_encode.rs:7:14: 7:19
    let mut _34: &mut std::ops::Range<usize>; // in scope 0 at hex_encode.rs:7:14: 7:19
    let mut _35: &mut std::ops::Range<usize>; // in scope 0 at hex_encode.rs:7:14: 7:19
    let mut _36: isize;                  // in scope 0 at hex_encode.rs:7:5: 9:6
    let mut _38: usize;                  // in scope 0 at hex_encode.rs:8:18: 8:25
    let mut _39: usize;                  // in scope 0 at hex_encode.rs:8:19: 8:20
    let _40: usize;                      // in scope 0 at hex_encode.rs:8:13: 8:14
    let mut _41: usize;                  // in scope 0 at hex_encode.rs:8:9: 8:15
    let mut _42: bool;                   // in scope 0 at hex_encode.rs:8:9: 8:15
    let _43: ();                         // in scope 0 at hex_encode.rs:10:5: 10:31
    let mut _44: &[u8];                  // in scope 0 at hex_encode.rs:10:16: 10:20
    let mut _45: &[u8; 16];              // in scope 0 at hex_encode.rs:10:16: 10:20
    let _46: &[u8; 16];                  // in scope 0 at hex_encode.rs:10:16: 10:20
    let mut _47: &mut [u8];              // in scope 0 at hex_encode.rs:10:22: 10:30
    let mut _48: &mut [u8; 32];          // in scope 0 at hex_encode.rs:10:22: 10:30
    let mut _49: &mut [u8; 32];          // in scope 0 at hex_encode.rs:10:22: 10:30
    let mut _50: (&&[u8; 32], &&[u8; 32]); // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
    let mut _51: &&[u8; 32];             // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:16: 37:22
    let _52: &[u8; 32];                  // in scope 0 at hex_encode.rs:11:16: 11:20
    let mut _53: &&[u8; 32];             // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
    let mut _56: bool;                   // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
    let mut _57: bool;                   // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
    let mut _58: &&[u8; 32];             // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:22: 39:31
    let mut _59: &&[u8; 32];             // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:35: 39:45
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
    let mut _62: &&[u8; 32];             // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
    let _63: &&[u8; 32];                 // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
    let mut _64: &&[u8; 32];             // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
    let _65: &&[u8; 32];                 // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
    let mut _66: std::option::Option<std::fmt::Arguments>; // in scope 0 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:85: 44:113
    scope 1 {
        debug dst => _1;                 // in scope 1 at hex_encode.rs:2:9: 2:16
        let _16: &&[u8];                 // in scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
        let _17: &&[u8; 6];              // in scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
        let mut _29: [u8; 16];           // in scope 1 at hex_encode.rs:6:9: 6:16
        let mut _68: &&[u8; 6];          // in scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
        scope 2 {
            debug left_val => _16;       // in scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
            debug right_val => _17;      // in scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
            let _22: core::panicking::AssertKind; // in scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:25: 40:29
            scope 3 {
                debug kind => _22;       // in scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:25: 40:29
            }
        }
        scope 4 {
            debug src => _29;            // in scope 4 at hex_encode.rs:6:9: 6:16
            let mut _32: std::ops::Range<usize>; // in scope 4 at hex_encode.rs:7:14: 7:19
            let _54: &&[u8; 32];         // in scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
            let _55: &&[u8; 32];         // in scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
            let mut _67: &&[u8; 32];     // in scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
            scope 5 {
                debug iter => _32;       // in scope 5 at hex_encode.rs:7:14: 7:19
                let _37: usize;          // in scope 5 at hex_encode.rs:7:9: 7:10
                scope 6 {
                    debug i => _37;      // in scope 6 at hex_encode.rs:7:9: 7:10
                }
            }
            scope 7 {
                debug left_val => _54;   // in scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
                debug right_val => _55;  // in scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
                let _60: core::panicking::AssertKind; // in scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:25: 40:29
                scope 8 {
                    debug kind => _60;   // in scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:25: 40:29
                }
            }
        }
    }

    bb0: {
        StorageLive(_1);                 // scope 0 at hex_encode.rs:2:9: 2:16
        _1 = [const 0_u8; 32];           // scope 0 at hex_encode.rs:2:19: 2:26
        StorageLive(_2);                 // scope 1 at hex_encode.rs:3:5: 3:42
        StorageLive(_3);                 // scope 1 at hex_encode.rs:3:16: 3:31
        StorageLive(_4);                 // scope 1 at hex_encode.rs:3:16: 3:31
        StorageLive(_5);                 // scope 1 at hex_encode.rs:3:16: 3:31
        _5 = const b"\x01\x02\x03";      // scope 1 at hex_encode.rs:3:16: 3:31
                                         // ty::Const
                                         // + ty: &[u8; 3]
                                         // + val: Value(Scalar(alloc5))
                                         // mir::Constant
                                         // + span: hex_encode.rs:3:16: 3:31
                                         // + literal: Const { ty: &[u8; 3], val: Value(Scalar(alloc5)) }
        _4 = _5;                         // scope 1 at hex_encode.rs:3:16: 3:31
        _3 = move _4 as &[u8] (Pointer(Unsize)); // scope 1 at hex_encode.rs:3:16: 3:31
        StorageDead(_4);                 // scope 1 at hex_encode.rs:3:30: 3:31
        StorageLive(_6);                 // scope 1 at hex_encode.rs:3:33: 3:41
        StorageLive(_7);                 // scope 1 at hex_encode.rs:3:33: 3:41
        StorageLive(_8);                 // scope 1 at hex_encode.rs:3:33: 3:41
        _8 = &mut _1;                    // scope 1 at hex_encode.rs:3:33: 3:41
        _7 = &mut (*_8);                 // scope 1 at hex_encode.rs:3:33: 3:41
        _6 = move _7 as &mut [u8] (Pointer(Unsize)); // scope 1 at hex_encode.rs:3:33: 3:41
        StorageDead(_7);                 // scope 1 at hex_encode.rs:3:40: 3:41
        _2 = hex_encode(move _3, move _6) -> bb1; // scope 1 at hex_encode.rs:3:5: 3:42
                                         // mir::Constant
                                         // + span: hex_encode.rs:3:5: 3:15
                                         // + literal: Const { ty: for<'r, 's> fn(&'r [u8], &'s mut [u8]) {hex_encode::hex_encode}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_6);                 // scope 1 at hex_encode.rs:3:41: 3:42
        StorageDead(_3);                 // scope 1 at hex_encode.rs:3:41: 3:42
        StorageDead(_8);                 // scope 1 at hex_encode.rs:3:42: 3:43
        StorageDead(_5);                 // scope 1 at hex_encode.rs:3:42: 3:43
        StorageDead(_2);                 // scope 1 at hex_encode.rs:3:42: 3:43
        StorageLive(_9);                 // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
        StorageLive(_10);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:16: 37:22
        StorageLive(_11);                // scope 1 at hex_encode.rs:4:16: 4:25
        StorageLive(_12);                // scope 1 at hex_encode.rs:4:17: 4:25
        StorageLive(_13);                // scope 1 at hex_encode.rs:4:17: 4:20
        _13 = &_1;                       // scope 1 at hex_encode.rs:4:17: 4:20
        StorageLive(_14);                // scope 1 at hex_encode.rs:4:21: 4:24
        (_14.0: usize) = const 6_usize;  // scope 1 at hex_encode.rs:4:21: 4:24
        _12 = <[u8; 32] as Index<RangeTo<usize>>>::index(move _13, move _14) -> bb2; // scope 1 at hex_encode.rs:4:17: 4:25
                                         // mir::Constant
                                         // + span: hex_encode.rs:4:17: 4:25
                                         // + literal: Const { ty: for<'r> fn(&'r [u8; 32], std::ops::RangeTo<usize>) -> &'r <[u8; 32] as std::ops::Index<std::ops::RangeTo<usize>>>::Output {<[u8; 32] as std::ops::Index<std::ops::RangeTo<usize>>>::index}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageDead(_14);                // scope 1 at hex_encode.rs:4:24: 4:25
        StorageDead(_13);                // scope 1 at hex_encode.rs:4:24: 4:25
        _11 = _12;                       // scope 1 at hex_encode.rs:4:16: 4:25
        _10 = &_11;                      // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:16: 37:22
        StorageLive(_15);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
        _68 = const hex_encode::hex::promoted[1]; // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
                                         // ty::Const
                                         // + ty: &&[u8; 6]
                                         // + val: Unevaluated(hex_encode::hex, [], Some(promoted[1]))
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
                                         // + literal: Const { ty: &&[u8; 6], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:41 ~ main[8185]::hex_encode::hex), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[1]) }) }
        _15 = _68;                       // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
        (_9.0: &&[u8]) = move _10;       // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
        (_9.1: &&[u8; 6]) = move _15;    // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
        StorageDead(_15);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:31: 37:32
        StorageDead(_10);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:31: 37:32
        StorageLive(_16);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
        _16 = (_9.0: &&[u8]);            // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
        StorageLive(_17);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
        _17 = (_9.1: &&[u8; 6]);         // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
        StorageLive(_18);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
        StorageLive(_19);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
        StorageLive(_20);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:22: 39:31
        _20 = _16;                       // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:22: 39:31
        StorageLive(_21);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:35: 39:45
        _21 = _17;                       // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:35: 39:45
        _19 = <&[u8] as PartialEq<&[u8; 6]>>::eq(move _20, move _21) -> bb3; // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &[u8], &'s &[u8; 6]) -> bool {<&[u8] as std::cmp::PartialEq<&[u8; 6]>>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb3: {
        StorageDead(_21);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:45: 39:46
        StorageDead(_20);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:45: 39:46
        _18 = Not(move _19);             // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
        StorageDead(_19);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:45: 39:46
        switchInt(move _18) -> [false: bb5, otherwise: bb4]; // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
    }

    bb4: {
        StorageLive(_22);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:25: 40:29
        discriminant(_22) = 0;           // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:32: 40:65
        StorageLive(_23);                // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
        _23 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
                                         // ty::Const
                                         // + ty: core::panicking::AssertKind
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        StorageLive(_24);                // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        StorageLive(_25);                // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        _25 = _16;                       // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        _24 = _25;                       // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        StorageLive(_26);                // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        StorageLive(_27);                // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        _27 = _17;                       // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        _26 = _27;                       // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        StorageLive(_28);                // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:85: 44:113
        discriminant(_28) = 0;           // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:85: 44:113
        core::panicking::assert_failed::<&[u8], &[u8; 6]>(move _23, move _24, move _26, move _28); // scope 3 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:21: 44:114
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:21: 44:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r &[u8], &'s &[u8; 6], std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<&[u8], &[u8; 6]>}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_18);                // scope 2 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:45:17: 45:18
        StorageDead(_17);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:46:13: 46:14
        StorageDead(_16);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:46:13: 46:14
        StorageDead(_12);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:48:5: 48:6
        StorageDead(_11);                // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:48:5: 48:6
        StorageDead(_9);                 // scope 1 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:48:5: 48:6
        StorageLive(_29);                // scope 1 at hex_encode.rs:6:9: 6:16
        _29 = [const 0_u8; 16];          // scope 1 at hex_encode.rs:6:19: 6:26
        StorageLive(_30);                // scope 4 at hex_encode.rs:7:14: 7:19
        StorageLive(_31);                // scope 4 at hex_encode.rs:7:14: 7:19
        (_31.0: usize) = const 0_usize;  // scope 4 at hex_encode.rs:7:14: 7:19
        (_31.1: usize) = const 16_usize; // scope 4 at hex_encode.rs:7:14: 7:19
        _30 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _31) -> bb6; // scope 4 at hex_encode.rs:7:14: 7:19
                                         // mir::Constant
                                         // + span: hex_encode.rs:7:14: 7:19
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as std::iter::IntoIterator>::IntoIter {<std::ops::Range<usize> as std::iter::IntoIterator>::into_iter}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_31);                // scope 4 at hex_encode.rs:7:18: 7:19
        StorageLive(_32);                // scope 4 at hex_encode.rs:7:14: 7:19
        _32 = move _30;                  // scope 4 at hex_encode.rs:7:14: 7:19
        goto -> bb7;                     // scope 5 at hex_encode.rs:7:5: 9:6
    }

    bb7: {
        StorageLive(_33);                // scope 5 at hex_encode.rs:7:14: 7:19
        StorageLive(_34);                // scope 5 at hex_encode.rs:7:14: 7:19
        StorageLive(_35);                // scope 5 at hex_encode.rs:7:14: 7:19
        _35 = &mut _32;                  // scope 5 at hex_encode.rs:7:14: 7:19
        _34 = &mut (*_35);               // scope 5 at hex_encode.rs:7:14: 7:19
        _33 = <std::ops::Range<usize> as Iterator>::next(move _34) -> bb8; // scope 5 at hex_encode.rs:7:14: 7:19
                                         // mir::Constant
                                         // + span: hex_encode.rs:7:14: 7:19
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<usize>) -> std::option::Option<<std::ops::Range<usize> as std::iter::Iterator>::Item> {<std::ops::Range<usize> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb8: {
        StorageDead(_34);                // scope 5 at hex_encode.rs:7:18: 7:19
        _36 = discriminant(_33);         // scope 5 at hex_encode.rs:7:14: 7:19
        switchInt(move _36) -> [0_isize: bb11, 1_isize: bb9, otherwise: bb10]; // scope 5 at hex_encode.rs:7:14: 7:19
    }

    bb9: {
        StorageLive(_37);                // scope 5 at hex_encode.rs:7:9: 7:10
        _37 = ((_33 as Some).0: usize);  // scope 5 at hex_encode.rs:7:9: 7:10
        StorageLive(_38);                // scope 6 at hex_encode.rs:8:18: 8:25
        StorageLive(_39);                // scope 6 at hex_encode.rs:8:19: 8:20
        _39 = _37;                       // scope 6 at hex_encode.rs:8:19: 8:20
        _38 = Add(move _39, const 1_usize); // scope 6 at hex_encode.rs:8:18: 8:25
        StorageDead(_39);                // scope 6 at hex_encode.rs:8:24: 8:25
        StorageLive(_40);                // scope 6 at hex_encode.rs:8:13: 8:14
        _40 = _37;                       // scope 6 at hex_encode.rs:8:13: 8:14
        _41 = const 16_usize;            // scope 6 at hex_encode.rs:8:9: 8:15
        _42 = Lt(_40, _41);              // scope 6 at hex_encode.rs:8:9: 8:15
        assert(move _42, "index out of bounds: the length is {} but the index is {}", move _41, _40) -> bb12; // scope 6 at hex_encode.rs:8:9: 8:15
    }

    bb10: {
        unreachable;                     // scope 5 at hex_encode.rs:7:14: 7:19
    }

    bb11: {
        StorageDead(_35);                // scope 5 at hex_encode.rs:9:5: 9:6
        StorageDead(_33);                // scope 5 at hex_encode.rs:9:5: 9:6
        StorageDead(_32);                // scope 4 at hex_encode.rs:9:5: 9:6
        StorageDead(_30);                // scope 4 at hex_encode.rs:9:5: 9:6
        StorageLive(_43);                // scope 4 at hex_encode.rs:10:5: 10:31
        StorageLive(_44);                // scope 4 at hex_encode.rs:10:16: 10:20
        StorageLive(_45);                // scope 4 at hex_encode.rs:10:16: 10:20
        StorageLive(_46);                // scope 4 at hex_encode.rs:10:16: 10:20
        _46 = &_29;                      // scope 4 at hex_encode.rs:10:16: 10:20
        _45 = _46;                       // scope 4 at hex_encode.rs:10:16: 10:20
        _44 = move _45 as &[u8] (Pointer(Unsize)); // scope 4 at hex_encode.rs:10:16: 10:20
        StorageDead(_45);                // scope 4 at hex_encode.rs:10:19: 10:20
        StorageLive(_47);                // scope 4 at hex_encode.rs:10:22: 10:30
        StorageLive(_48);                // scope 4 at hex_encode.rs:10:22: 10:30
        StorageLive(_49);                // scope 4 at hex_encode.rs:10:22: 10:30
        _49 = &mut _1;                   // scope 4 at hex_encode.rs:10:22: 10:30
        _48 = &mut (*_49);               // scope 4 at hex_encode.rs:10:22: 10:30
        _47 = move _48 as &mut [u8] (Pointer(Unsize)); // scope 4 at hex_encode.rs:10:22: 10:30
        StorageDead(_48);                // scope 4 at hex_encode.rs:10:29: 10:30
        _43 = hex_encode(move _44, move _47) -> bb13; // scope 4 at hex_encode.rs:10:5: 10:31
                                         // mir::Constant
                                         // + span: hex_encode.rs:10:5: 10:15
                                         // + literal: Const { ty: for<'r, 's> fn(&'r [u8], &'s mut [u8]) {hex_encode::hex_encode}, val: Value(Scalar(<ZST>)) }
    }

    bb12: {
        _29[_40] = move _38 as u8 (Misc); // scope 6 at hex_encode.rs:8:9: 8:31
        StorageDead(_38);                // scope 6 at hex_encode.rs:8:30: 8:31
        StorageDead(_40);                // scope 6 at hex_encode.rs:8:31: 8:32
        StorageDead(_37);                // scope 5 at hex_encode.rs:9:5: 9:6
        StorageDead(_35);                // scope 5 at hex_encode.rs:9:5: 9:6
        StorageDead(_33);                // scope 5 at hex_encode.rs:9:5: 9:6
        goto -> bb7;                     // scope 5 at hex_encode.rs:7:5: 9:6
    }

    bb13: {
        StorageDead(_47);                // scope 4 at hex_encode.rs:10:30: 10:31
        StorageDead(_44);                // scope 4 at hex_encode.rs:10:30: 10:31
        StorageDead(_49);                // scope 4 at hex_encode.rs:10:31: 10:32
        StorageDead(_46);                // scope 4 at hex_encode.rs:10:31: 10:32
        StorageDead(_43);                // scope 4 at hex_encode.rs:10:31: 10:32
        StorageLive(_50);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
        StorageLive(_51);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:16: 37:22
        StorageLive(_52);                // scope 4 at hex_encode.rs:11:16: 11:20
        _52 = &_1;                       // scope 4 at hex_encode.rs:11:16: 11:20
        _51 = &_52;                      // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:16: 37:22
        StorageLive(_53);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
        _67 = const hex_encode::hex::promoted[0]; // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
                                         // ty::Const
                                         // + ty: &&[u8; 32]
                                         // + val: Unevaluated(hex_encode::hex, [], Some(promoted[0]))
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
                                         // + literal: Const { ty: &&[u8; 32], val: Unevaluated(Unevaluated { def: WithOptConstParam { did: DefId(0:41 ~ main[8185]::hex_encode::hex), const_param_did: None }, substs_: Some([]), promoted: Some(promoted[0]) }) }
        _53 = _67;                       // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:24: 37:31
        (_50.0: &&[u8; 32]) = move _51;  // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
        (_50.1: &&[u8; 32]) = move _53;  // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:15: 37:32
        StorageDead(_53);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:31: 37:32
        StorageDead(_51);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:37:31: 37:32
        StorageLive(_54);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
        _54 = (_50.0: &&[u8; 32]);       // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:14: 38:22
        StorageLive(_55);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
        _55 = (_50.1: &&[u8; 32]);       // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:38:24: 38:33
        StorageLive(_56);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
        StorageLive(_57);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
        StorageLive(_58);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:22: 39:31
        _58 = _54;                       // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:22: 39:31
        StorageLive(_59);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:35: 39:45
        _59 = _55;                       // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:35: 39:45
        _57 = <&[u8; 32] as PartialEq>::eq(move _58, move _59) -> bb14; // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:21: 39:46
                                         // + literal: Const { ty: for<'r, 's> fn(&'r &[u8; 32], &'s &[u8; 32]) -> bool {<&[u8; 32] as std::cmp::PartialEq>::eq}, val: Value(Scalar(<ZST>)) }
    }

    bb14: {
        StorageDead(_59);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:45: 39:46
        StorageDead(_58);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:45: 39:46
        _56 = Not(move _57);             // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
        StorageDead(_57);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:45: 39:46
        switchInt(move _56) -> [false: bb16, otherwise: bb15]; // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:39:20: 39:46
    }

    bb15: {
        StorageLive(_60);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:25: 40:29
        discriminant(_60) = 0;           // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:40:32: 40:65
        StorageLive(_61);                // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
        _61 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
                                         // ty::Const
                                         // + ty: core::panicking::AssertKind
                                         // + val: Value(Scalar(0x00))
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:54: 44:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        StorageLive(_62);                // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        StorageLive(_63);                // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        _63 = _54;                       // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        _62 = _63;                       // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:60: 44:70
        StorageLive(_64);                // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        StorageLive(_65);                // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        _65 = _55;                       // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        _64 = _65;                       // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:72: 44:83
        StorageLive(_66);                // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:85: 44:113
        discriminant(_66) = 0;           // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:85: 44:113
        core::panicking::assert_failed::<&[u8; 32], &[u8; 32]>(move _61, move _62, move _64, move _66); // scope 8 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:21: 44:114
                                         // mir::Constant
                                         // + span: /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:44:21: 44:53
                                         // + literal: Const { ty: for<'r, 's, 't0> fn(core::panicking::AssertKind, &'r &[u8; 32], &'s &[u8; 32], std::option::Option<std::fmt::Arguments<'t0>>) -> ! {core::panicking::assert_failed::<&[u8; 32], &[u8; 32]>}, val: Value(Scalar(<ZST>)) }
    }

    bb16: {
        StorageDead(_56);                // scope 7 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:45:17: 45:18
        StorageDead(_55);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:46:13: 46:14
        StorageDead(_54);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:46:13: 46:14
        StorageDead(_52);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:48:5: 48:6
        StorageDead(_50);                // scope 4 at /rustc/efec545293b9263be9edfb283a7aa66350b3acbf\library\core\src\macros\mod.rs:48:5: 48:6
        StorageDead(_29);                // scope 1 at hex_encode.rs:12:1: 12:2
        StorageDead(_1);                 // scope 0 at hex_encode.rs:12:1: 12:2
        return;                          // scope 0 at hex_encode.rs:12:2: 12:2
    }
}

alloc5 (size: 3, align: 1) {
    01 02 03                                        │ ...
}
