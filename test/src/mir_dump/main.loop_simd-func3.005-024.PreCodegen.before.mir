// MIR for `func3` before PreCodegen

fn func3(_1: usize) -> f32 {
    debug len => _1;                     // in scope 0 at loop_simd.rs:60:10: 60:13
    let mut _2: usize;                   // in scope 0 at loop_simd.rs:65:9: 65:18
    let mut _4: [usize; _];              // in scope 0 at loop_simd.rs:68:42: 68:55
    let mut _7: [f32; _];                // in scope 0 at loop_simd.rs:74:42: 74:56
    let mut _8: bool;                    // in scope 0 at loop_simd.rs:85:20: 85:37
    let mut _9: usize;                   // in scope 0 at loop_simd.rs:85:20: 85:25
    let mut _10: bool;                   // in scope 0 at loop_simd.rs:89:20: 89:32
    let mut _11: usize;                  // in scope 0 at loop_simd.rs:89:20: 89:25
    let mut _12: usize;                  // in scope 0 at loop_simd.rs:89:29: 89:32
    let mut _13: usize;                  // in scope 0 at loop_simd.rs:93:33: 93:38
    let _14: usize;                      // in scope 0 at loop_simd.rs:93:24: 93:29
    let mut _15: usize;                  // in scope 0 at loop_simd.rs:93:17: 93:30
    let mut _16: bool;                   // in scope 0 at loop_simd.rs:93:17: 93:30
    let mut _17: usize;                  // in scope 0 at loop_simd.rs:96:35: 96:40
    let _18: usize;                      // in scope 0 at loop_simd.rs:96:26: 96:31
    let mut _19: usize;                  // in scope 0 at loop_simd.rs:96:17: 96:32
    let mut _20: bool;                   // in scope 0 at loop_simd.rs:96:17: 96:32
    let mut _21: f32;                    // in scope 0 at loop_simd.rs:105:20: 105:75
    let mut _22: loop_simd::func3::MySIMD<f32>; // in scope 0 at loop_simd.rs:105:56: 105:74
    let mut _23: loop_simd::func3::MySIMD<f32>; // in scope 0 at loop_simd.rs:105:67: 105:73
    let mut _25: bool;                   // in scope 0 at loop_simd.rs:110:16: 110:26
    let mut _26: usize;                  // in scope 0 at loop_simd.rs:110:16: 110:17
    let mut _27: usize;                  // in scope 0 at loop_simd.rs:110:21: 110:26
    let mut _28: f32;                    // in scope 0 at loop_simd.rs:113:20: 113:45
    let mut _29: f32;                    // in scope 0 at loop_simd.rs:113:20: 113:38
    let mut _30: usize;                  // in scope 0 at loop_simd.rs:113:21: 113:30
    let _31: usize;                      // in scope 0 at loop_simd.rs:113:28: 113:29
    let mut _32: usize;                  // in scope 0 at loop_simd.rs:113:21: 113:30
    let mut _33: bool;                   // in scope 0 at loop_simd.rs:113:21: 113:30
    scope 1 {
        debug index => _2;               // in scope 1 at loop_simd.rs:65:9: 65:18
        let mut _0: f32;                 // return place in scope 1 at loop_simd.rs:66:9: 66:16
        scope 2 {
            debug sum => _0;             // in scope 2 at loop_simd.rs:66:9: 66:16
            let mut _3: loop_simd::func3::MySIMD<usize>; // in scope 2 at loop_simd.rs:68:9: 68:17
            scope 3 {
                debug temp => _3;        // in scope 3 at loop_simd.rs:68:9: 68:17
                let mut _5: usize;       // in scope 3 at loop_simd.rs:71:9: 71:18
                scope 4 {
                    debug inner => _5;   // in scope 4 at loop_simd.rs:71:9: 71:18
                    let mut _6: loop_simd::func3::MySIMD<f32>; // in scope 4 at loop_simd.rs:74:9: 74:19
                    scope 5 {
                        debug v_temp => _6; // in scope 5 at loop_simd.rs:74:9: 74:19
                        scope 6 {
                            let mut _24: usize; // in scope 6 at loop_simd.rs:108:13: 108:18
                            scope 7 {
                                debug p => _24; // in scope 7 at loop_simd.rs:108:13: 108:18
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at loop_simd.rs:65:9: 65:18
        _2 = const 0_usize;              // scope 0 at loop_simd.rs:65:21: 65:22
        _0 = const 0f32;                 // scope 1 at loop_simd.rs:66:19: 66:21
        StorageLive(_3);                 // scope 2 at loop_simd.rs:68:9: 68:17
        StorageLive(_4);                 // scope 2 at loop_simd.rs:68:42: 68:55
        _4 = [const 0_usize; SIMD_LEN];  // scope 2 at loop_simd.rs:68:42: 68:55
        (_3.0: [usize; _]) = move _4;    // scope 2 at loop_simd.rs:68:35: 68:56
        StorageDead(_4);                 // scope 2 at loop_simd.rs:68:55: 68:56
        StorageLive(_5);                 // scope 3 at loop_simd.rs:71:9: 71:18
        StorageLive(_6);                 // scope 4 at loop_simd.rs:74:9: 74:19
        StorageLive(_7);                 // scope 4 at loop_simd.rs:74:42: 74:56
        _7 = [const 0f32; SIMD_LEN];     // scope 4 at loop_simd.rs:74:42: 74:56
        (_6.0: [f32; _]) = move _7;      // scope 4 at loop_simd.rs:74:35: 74:57
        StorageDead(_7);                 // scope 4 at loop_simd.rs:74:56: 74:57
        goto -> bb1;                     // scope 6 at loop_simd.rs:78:9: 106:10
    }

    bb1: {
        _5 = const 0_usize;              // scope 6 at loop_simd.rs:80:13: 80:22
        goto -> bb2;                     // scope 6 at loop_simd.rs:83:13: 103:14
    }

    bb2: {
        StorageLive(_8);                 // scope 6 at loop_simd.rs:85:20: 85:37
        StorageLive(_9);                 // scope 6 at loop_simd.rs:85:20: 85:25
        _9 = _5;                         // scope 6 at loop_simd.rs:85:20: 85:25
        _8 = Ge(move _9, const SIMD_LEN); // scope 6 at loop_simd.rs:85:20: 85:37
        StorageDead(_9);                 // scope 6 at loop_simd.rs:85:36: 85:37
        switchInt(move _8) -> [false: bb4, otherwise: bb3]; // scope 6 at loop_simd.rs:85:20: 85:37
    }

    bb3: {
        StorageDead(_8);                 // scope 6 at loop_simd.rs:87:17: 87:18
        StorageLive(_21);                // scope 6 at loop_simd.rs:105:20: 105:75
        StorageLive(_22);                // scope 6 at loop_simd.rs:105:56: 105:74
        StorageLive(_23);                // scope 6 at loop_simd.rs:105:67: 105:73
        _23 = _6;                        // scope 6 at loop_simd.rs:105:67: 105:73
        _22 = loop_simd::simd_fsqrt::<func3::MySIMD<f32>>(move _23) -> bb9; // scope 6 at loop_simd.rs:105:56: 105:74
                                         // mir::Constant
                                         // + span: loop_simd.rs:105:56: 105:66
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func3::MySIMD<f32>) -> loop_simd::func3::MySIMD<f32> {loop_simd::simd_fsqrt::<loop_simd::func3::MySIMD<f32>>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_8);                 // scope 6 at loop_simd.rs:87:17: 87:18
        StorageLive(_10);                // scope 6 at loop_simd.rs:89:20: 89:32
        StorageLive(_11);                // scope 6 at loop_simd.rs:89:20: 89:25
        _11 = _2;                        // scope 6 at loop_simd.rs:89:20: 89:25
        StorageLive(_12);                // scope 6 at loop_simd.rs:89:29: 89:32
        _12 = _1;                        // scope 6 at loop_simd.rs:89:29: 89:32
        _10 = Ge(move _11, move _12);    // scope 6 at loop_simd.rs:89:20: 89:32
        StorageDead(_12);                // scope 6 at loop_simd.rs:89:31: 89:32
        StorageDead(_11);                // scope 6 at loop_simd.rs:89:31: 89:32
        switchInt(move _10) -> [false: bb6, otherwise: bb5]; // scope 6 at loop_simd.rs:89:20: 89:32
    }

    bb5: {
        StorageDead(_10);                // scope 6 at loop_simd.rs:91:17: 91:18
        StorageLive(_24);                // scope 6 at loop_simd.rs:108:13: 108:18
        _24 = const 0_usize;             // scope 6 at loop_simd.rs:108:21: 108:22
        goto -> bb11;                    // scope 7 at loop_simd.rs:109:9: 115:10
    }

    bb6: {
        StorageDead(_10);                // scope 6 at loop_simd.rs:91:17: 91:18
        StorageLive(_13);                // scope 6 at loop_simd.rs:93:33: 93:38
        _13 = _2;                        // scope 6 at loop_simd.rs:93:33: 93:38
        StorageLive(_14);                // scope 6 at loop_simd.rs:93:24: 93:29
        _14 = _5;                        // scope 6 at loop_simd.rs:93:24: 93:29
        _15 = const 32_usize;            // scope 6 at loop_simd.rs:93:17: 93:30
        _16 = Lt(_14, _15);              // scope 6 at loop_simd.rs:93:17: 93:30
        assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> bb7; // scope 6 at loop_simd.rs:93:17: 93:30
    }

    bb7: {
        (_3.0: [usize; 32])[_14] = move _13; // scope 6 at loop_simd.rs:93:17: 93:38
        StorageDead(_13);                // scope 6 at loop_simd.rs:93:37: 93:38
        StorageDead(_14);                // scope 6 at loop_simd.rs:93:38: 93:39
        StorageLive(_17);                // scope 6 at loop_simd.rs:96:35: 96:40
        _17 = _2;                        // scope 6 at loop_simd.rs:96:35: 96:40
        StorageLive(_18);                // scope 6 at loop_simd.rs:96:26: 96:31
        _18 = _5;                        // scope 6 at loop_simd.rs:96:26: 96:31
        _19 = const 32_usize;            // scope 6 at loop_simd.rs:96:17: 96:32
        _20 = Lt(_18, _19);              // scope 6 at loop_simd.rs:96:17: 96:32
        assert(move _20, "index out of bounds: the length is {} but the index is {}", move _19, _18) -> bb8; // scope 6 at loop_simd.rs:96:17: 96:32
    }

    bb8: {
        (_6.0: [f32; 32])[_18] = move _17 as f32 (Misc); // scope 6 at loop_simd.rs:96:17: 96:47
        StorageDead(_17);                // scope 6 at loop_simd.rs:96:46: 96:47
        StorageDead(_18);                // scope 6 at loop_simd.rs:96:47: 96:48
        _2 = Add(_2, const 1_usize);     // scope 6 at loop_simd.rs:99:17: 99:27
        _5 = Add(_5, const 1_usize);     // scope 6 at loop_simd.rs:102:17: 102:27
        goto -> bb2;                     // scope 6 at loop_simd.rs:83:13: 103:14
    }

    bb9: {
        StorageDead(_23);                // scope 6 at loop_simd.rs:105:73: 105:74
        _21 = loop_simd::simd_reduce_add_unordered::<func3::MySIMD<f32>, f32>(move _22) -> bb10; // scope 6 at loop_simd.rs:105:20: 105:75
                                         // mir::Constant
                                         // + span: loop_simd.rs:105:20: 105:55
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func3::MySIMD<f32>) -> f32 {loop_simd::simd_reduce_add_unordered::<loop_simd::func3::MySIMD<f32>, f32>}, val: Value(Scalar(<ZST>)) }
    }

    bb10: {
        StorageDead(_22);                // scope 6 at loop_simd.rs:105:74: 105:75
        _0 = Add(_0, move _21);          // scope 6 at loop_simd.rs:105:13: 105:75
        StorageDead(_21);                // scope 6 at loop_simd.rs:105:74: 105:75
        goto -> bb1;                     // scope 6 at loop_simd.rs:78:9: 106:10
    }

    bb11: {
        StorageLive(_25);                // scope 7 at loop_simd.rs:110:16: 110:26
        StorageLive(_26);                // scope 7 at loop_simd.rs:110:16: 110:17
        _26 = _24;                       // scope 7 at loop_simd.rs:110:16: 110:17
        StorageLive(_27);                // scope 7 at loop_simd.rs:110:21: 110:26
        _27 = _5;                        // scope 7 at loop_simd.rs:110:21: 110:26
        _25 = Ge(move _26, move _27);    // scope 7 at loop_simd.rs:110:16: 110:26
        StorageDead(_27);                // scope 7 at loop_simd.rs:110:25: 110:26
        StorageDead(_26);                // scope 7 at loop_simd.rs:110:25: 110:26
        switchInt(move _25) -> [false: bb13, otherwise: bb12]; // scope 7 at loop_simd.rs:110:16: 110:26
    }

    bb12: {
        StorageDead(_25);                // scope 7 at loop_simd.rs:112:13: 112:14
        StorageDead(_24);                // scope 6 at loop_simd.rs:116:5: 116:6
        StorageDead(_6);                 // scope 4 at loop_simd.rs:118:1: 118:2
        StorageDead(_5);                 // scope 3 at loop_simd.rs:118:1: 118:2
        StorageDead(_3);                 // scope 2 at loop_simd.rs:118:1: 118:2
        StorageDead(_2);                 // scope 0 at loop_simd.rs:118:1: 118:2
        return;                          // scope 0 at loop_simd.rs:118:2: 118:2
    }

    bb13: {
        StorageDead(_25);                // scope 7 at loop_simd.rs:112:13: 112:14
        StorageLive(_28);                // scope 7 at loop_simd.rs:113:20: 113:45
        StorageLive(_29);                // scope 7 at loop_simd.rs:113:20: 113:38
        StorageLive(_30);                // scope 7 at loop_simd.rs:113:21: 113:30
        StorageLive(_31);                // scope 7 at loop_simd.rs:113:28: 113:29
        _31 = _24;                       // scope 7 at loop_simd.rs:113:28: 113:29
        _32 = const 32_usize;            // scope 7 at loop_simd.rs:113:21: 113:30
        _33 = Lt(_31, _32);              // scope 7 at loop_simd.rs:113:21: 113:30
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb14; // scope 7 at loop_simd.rs:113:21: 113:30
    }

    bb14: {
        _30 = (_3.0: [usize; 32])[_31];  // scope 7 at loop_simd.rs:113:21: 113:30
        _29 = move _30 as f32 (Misc);    // scope 7 at loop_simd.rs:113:20: 113:38
        StorageDead(_30);                // scope 7 at loop_simd.rs:113:37: 113:38
        _28 = f32::<impl f32>::sqrt(move _29) -> bb15; // scope 7 at loop_simd.rs:113:20: 113:45
                                         // mir::Constant
                                         // + span: loop_simd.rs:113:39: 113:43
                                         // + literal: Const { ty: fn(f32) -> f32 {std::f32::<impl f32>::sqrt}, val: Value(Scalar(<ZST>)) }
    }

    bb15: {
        StorageDead(_29);                // scope 7 at loop_simd.rs:113:44: 113:45
        _0 = Add(_0, move _28);          // scope 7 at loop_simd.rs:113:13: 113:45
        StorageDead(_28);                // scope 7 at loop_simd.rs:113:44: 113:45
        StorageDead(_31);                // scope 7 at loop_simd.rs:113:45: 113:46
        _24 = Add(_24, const 1_usize);   // scope 7 at loop_simd.rs:114:13: 114:19
        goto -> bb11;                    // scope 7 at loop_simd.rs:109:9: 115:10
    }
}
