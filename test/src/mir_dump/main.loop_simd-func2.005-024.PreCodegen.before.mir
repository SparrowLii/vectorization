// MIR for `func2` before PreCodegen

fn func2(_1: usize) -> f32 {
    debug len => _1;                     // in scope 0 at loop_simd.rs:46:10: 46:13
    let mut _2: usize;                   // in scope 0 at loop_simd.rs:55:9: 55:18
    let mut _4: [f32; _];                // in scope 0 at loop_simd.rs:56:39: 56:53
    let mut _6: [f32; _];                // in scope 0 at loop_simd.rs:57:40: 57:54
    let mut _8: bool;                    // in scope 0 at loop_simd.rs:64:20: 64:37
    let mut _9: usize;                   // in scope 0 at loop_simd.rs:64:20: 64:25
    let mut _10: bool;                   // in scope 0 at loop_simd.rs:67:20: 67:32
    let mut _11: usize;                  // in scope 0 at loop_simd.rs:67:20: 67:25
    let mut _12: usize;                  // in scope 0 at loop_simd.rs:67:29: 67:32
    let mut _13: usize;                  // in scope 0 at loop_simd.rs:70:33: 70:38
    let _14: usize;                      // in scope 0 at loop_simd.rs:70:24: 70:29
    let mut _15: usize;                  // in scope 0 at loop_simd.rs:70:17: 70:30
    let mut _16: bool;                   // in scope 0 at loop_simd.rs:70:17: 70:30
    let mut _17: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:74:19: 74:50
    let mut _18: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:74:28: 74:31
    let mut _19: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:74:33: 74:49
    let mut _20: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:74:44: 74:48
    let mut _21: bool;                   // in scope 0 at loop_simd.rs:76:12: 76:29
    let mut _22: usize;                  // in scope 0 at loop_simd.rs:76:12: 76:17
    let mut _23: f32;                    // in scope 0 at loop_simd.rs:77:20: 77:60
    let mut _24: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:77:56: 77:59
    let mut _25: bool;                   // in scope 0 at loop_simd.rs:80:16: 80:26
    let mut _26: usize;                  // in scope 0 at loop_simd.rs:80:16: 80:21
    let mut _27: f32;                    // in scope 0 at loop_simd.rs:84:20: 84:42
    let mut _28: f32;                    // in scope 0 at loop_simd.rs:84:20: 84:35
    let _29: usize;                      // in scope 0 at loop_simd.rs:84:28: 84:33
    let mut _30: usize;                  // in scope 0 at loop_simd.rs:84:20: 84:35
    let mut _31: bool;                   // in scope 0 at loop_simd.rs:84:20: 84:35
    scope 1 {
        debug index => _2;               // in scope 1 at loop_simd.rs:55:9: 55:18
        let mut _3: loop_simd::func2::MySIMD<f32>; // in scope 1 at loop_simd.rs:56:9: 56:16
        scope 2 {
            debug sum => _3;             // in scope 2 at loop_simd.rs:56:9: 56:16
            let mut _5: loop_simd::func2::MySIMD<f32>; // in scope 2 at loop_simd.rs:57:9: 57:17
            scope 3 {
                debug temp => _5;        // in scope 3 at loop_simd.rs:57:9: 57:17
                let mut _0: f32;         // return place in scope 3 at loop_simd.rs:58:9: 58:16
                scope 4 {
                    debug ans => _0;     // in scope 4 at loop_simd.rs:58:9: 58:16
                    let mut _7: usize;   // in scope 4 at loop_simd.rs:59:9: 59:18
                    scope 5 {
                        debug inner => _7; // in scope 5 at loop_simd.rs:59:9: 59:18
                        scope 6 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at loop_simd.rs:55:9: 55:18
        _2 = const 0_usize;              // scope 0 at loop_simd.rs:55:21: 55:22
        StorageLive(_3);                 // scope 1 at loop_simd.rs:56:9: 56:16
        StorageLive(_4);                 // scope 1 at loop_simd.rs:56:39: 56:53
        _4 = [const 0f32; SIMD_LEN];     // scope 1 at loop_simd.rs:56:39: 56:53
        (_3.0: [f32; _]) = move _4;      // scope 1 at loop_simd.rs:56:32: 56:54
        StorageDead(_4);                 // scope 1 at loop_simd.rs:56:53: 56:54
        StorageLive(_5);                 // scope 2 at loop_simd.rs:57:9: 57:17
        StorageLive(_6);                 // scope 2 at loop_simd.rs:57:40: 57:54
        _6 = [const 0f32; SIMD_LEN];     // scope 2 at loop_simd.rs:57:40: 57:54
        (_5.0: [f32; _]) = move _6;      // scope 2 at loop_simd.rs:57:33: 57:55
        StorageDead(_6);                 // scope 2 at loop_simd.rs:57:54: 57:55
        _0 = const 0f32;                 // scope 3 at loop_simd.rs:58:19: 58:21
        StorageLive(_7);                 // scope 4 at loop_simd.rs:59:9: 59:18
        goto -> bb1;                     // scope 6 at loop_simd.rs:61:9: 75:10
    }

    bb1: {
        _7 = const 0_usize;              // scope 6 at loop_simd.rs:62:13: 62:22
        goto -> bb2;                     // scope 6 at loop_simd.rs:63:13: 73:14
    }

    bb2: {
        StorageLive(_8);                 // scope 6 at loop_simd.rs:64:20: 64:37
        StorageLive(_9);                 // scope 6 at loop_simd.rs:64:20: 64:25
        _9 = _7;                         // scope 6 at loop_simd.rs:64:20: 64:25
        _8 = Ge(move _9, const SIMD_LEN); // scope 6 at loop_simd.rs:64:20: 64:37
        StorageDead(_9);                 // scope 6 at loop_simd.rs:64:36: 64:37
        switchInt(move _8) -> [false: bb4, otherwise: bb3]; // scope 6 at loop_simd.rs:64:20: 64:37
    }

    bb3: {
        StorageDead(_8);                 // scope 6 at loop_simd.rs:66:17: 66:18
        StorageLive(_17);                // scope 6 at loop_simd.rs:74:19: 74:50
        StorageLive(_18);                // scope 6 at loop_simd.rs:74:28: 74:31
        _18 = _3;                        // scope 6 at loop_simd.rs:74:28: 74:31
        StorageLive(_19);                // scope 6 at loop_simd.rs:74:33: 74:49
        StorageLive(_20);                // scope 6 at loop_simd.rs:74:44: 74:48
        _20 = _5;                        // scope 6 at loop_simd.rs:74:44: 74:48
        _19 = loop_simd::simd_fsqrt::<MySIMD<f32>>(move _20) -> bb8; // scope 6 at loop_simd.rs:74:33: 74:49
                                         // mir::Constant
                                         // + span: loop_simd.rs:74:33: 74:43
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func2::MySIMD<f32>) -> loop_simd::func2::MySIMD<f32> {loop_simd::simd_fsqrt::<loop_simd::func2::MySIMD<f32>>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_8);                 // scope 6 at loop_simd.rs:66:17: 66:18
        StorageLive(_10);                // scope 6 at loop_simd.rs:67:20: 67:32
        StorageLive(_11);                // scope 6 at loop_simd.rs:67:20: 67:25
        _11 = _2;                        // scope 6 at loop_simd.rs:67:20: 67:25
        StorageLive(_12);                // scope 6 at loop_simd.rs:67:29: 67:32
        _12 = _1;                        // scope 6 at loop_simd.rs:67:29: 67:32
        _10 = Ge(move _11, move _12);    // scope 6 at loop_simd.rs:67:20: 67:32
        StorageDead(_12);                // scope 6 at loop_simd.rs:67:31: 67:32
        StorageDead(_11);                // scope 6 at loop_simd.rs:67:31: 67:32
        switchInt(move _10) -> [false: bb6, otherwise: bb5]; // scope 6 at loop_simd.rs:67:20: 67:32
    }

    bb5: {
        StorageDead(_10);                // scope 6 at loop_simd.rs:69:17: 69:18
        StorageLive(_21);                // scope 6 at loop_simd.rs:76:12: 76:29
        StorageLive(_22);                // scope 6 at loop_simd.rs:76:12: 76:17
        _22 = _2;                        // scope 6 at loop_simd.rs:76:12: 76:17
        _21 = Ge(move _22, const SIMD_LEN); // scope 6 at loop_simd.rs:76:12: 76:29
        StorageDead(_22);                // scope 6 at loop_simd.rs:76:28: 76:29
        switchInt(move _21) -> [false: bb12, otherwise: bb10]; // scope 6 at loop_simd.rs:76:12: 76:29
    }

    bb6: {
        StorageDead(_10);                // scope 6 at loop_simd.rs:69:17: 69:18
        StorageLive(_13);                // scope 6 at loop_simd.rs:70:33: 70:38
        _13 = _2;                        // scope 6 at loop_simd.rs:70:33: 70:38
        StorageLive(_14);                // scope 6 at loop_simd.rs:70:24: 70:29
        _14 = _7;                        // scope 6 at loop_simd.rs:70:24: 70:29
        _15 = const 32_usize;            // scope 6 at loop_simd.rs:70:17: 70:30
        _16 = Lt(_14, _15);              // scope 6 at loop_simd.rs:70:17: 70:30
        assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> bb7; // scope 6 at loop_simd.rs:70:17: 70:30
    }

    bb7: {
        (_5.0: [f32; 32])[_14] = move _13 as f32 (Misc); // scope 6 at loop_simd.rs:70:17: 70:45
        StorageDead(_13);                // scope 6 at loop_simd.rs:70:44: 70:45
        StorageDead(_14);                // scope 6 at loop_simd.rs:70:45: 70:46
        _2 = Add(_2, const 1_usize);     // scope 6 at loop_simd.rs:71:17: 71:27
        _7 = Add(_7, const 1_usize);     // scope 6 at loop_simd.rs:72:17: 72:27
        goto -> bb2;                     // scope 6 at loop_simd.rs:63:13: 73:14
    }

    bb8: {
        StorageDead(_20);                // scope 6 at loop_simd.rs:74:48: 74:49
        _17 = loop_simd::simd_add::<MySIMD<f32>>(move _18, move _19) -> bb9; // scope 6 at loop_simd.rs:74:19: 74:50
                                         // mir::Constant
                                         // + span: loop_simd.rs:74:19: 74:27
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func2::MySIMD<f32>, loop_simd::func2::MySIMD<f32>) -> loop_simd::func2::MySIMD<f32> {loop_simd::simd_add::<loop_simd::func2::MySIMD<f32>>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_19);                // scope 6 at loop_simd.rs:74:49: 74:50
        StorageDead(_18);                // scope 6 at loop_simd.rs:74:49: 74:50
        _3 = move _17;                   // scope 6 at loop_simd.rs:74:13: 74:50
        StorageDead(_17);                // scope 6 at loop_simd.rs:74:49: 74:50
        goto -> bb1;                     // scope 6 at loop_simd.rs:61:9: 75:10
    }

    bb10: {
        StorageLive(_23);                // scope 6 at loop_simd.rs:77:20: 77:60
        StorageLive(_24);                // scope 6 at loop_simd.rs:77:56: 77:59
        _24 = _3;                        // scope 6 at loop_simd.rs:77:56: 77:59
        _23 = loop_simd::simd_reduce_add_unordered::<MySIMD<f32>, f32>(move _24) -> bb11; // scope 6 at loop_simd.rs:77:20: 77:60
                                         // mir::Constant
                                         // + span: loop_simd.rs:77:20: 77:55
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func2::MySIMD<f32>) -> f32 {loop_simd::simd_reduce_add_unordered::<loop_simd::func2::MySIMD<f32>, f32>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_24);                // scope 6 at loop_simd.rs:77:59: 77:60
        _0 = Add(_0, move _23);          // scope 6 at loop_simd.rs:77:13: 77:60
        StorageDead(_23);                // scope 6 at loop_simd.rs:77:59: 77:60
        goto -> bb12;                    // scope 6 at loop_simd.rs:76:9: 78:10
    }

    bb12: {
        StorageDead(_21);                // scope 6 at loop_simd.rs:78:9: 78:10
        goto -> bb13;                    // scope 6 at loop_simd.rs:79:9: 85:10
    }

    bb13: {
        StorageLive(_25);                // scope 6 at loop_simd.rs:80:16: 80:26
        StorageLive(_26);                // scope 6 at loop_simd.rs:80:16: 80:21
        _26 = _7;                        // scope 6 at loop_simd.rs:80:16: 80:21
        _25 = Le(move _26, const 0_usize); // scope 6 at loop_simd.rs:80:16: 80:26
        StorageDead(_26);                // scope 6 at loop_simd.rs:80:25: 80:26
        switchInt(move _25) -> [false: bb15, otherwise: bb14]; // scope 6 at loop_simd.rs:80:16: 80:26
    }

    bb14: {
        StorageDead(_25);                // scope 6 at loop_simd.rs:82:13: 82:14
        StorageDead(_7);                 // scope 4 at loop_simd.rs:88:1: 88:2
        StorageDead(_5);                 // scope 2 at loop_simd.rs:88:1: 88:2
        StorageDead(_3);                 // scope 1 at loop_simd.rs:88:1: 88:2
        StorageDead(_2);                 // scope 0 at loop_simd.rs:88:1: 88:2
        return;                          // scope 0 at loop_simd.rs:88:2: 88:2
    }

    bb15: {
        StorageDead(_25);                // scope 6 at loop_simd.rs:82:13: 82:14
        _7 = Sub(_7, const 1_usize);     // scope 6 at loop_simd.rs:83:13: 83:23
        StorageLive(_27);                // scope 6 at loop_simd.rs:84:20: 84:42
        StorageLive(_28);                // scope 6 at loop_simd.rs:84:20: 84:35
        StorageLive(_29);                // scope 6 at loop_simd.rs:84:28: 84:33
        _29 = _7;                        // scope 6 at loop_simd.rs:84:28: 84:33
        _30 = const 32_usize;            // scope 6 at loop_simd.rs:84:20: 84:35
        _31 = Lt(_29, _30);              // scope 6 at loop_simd.rs:84:20: 84:35
        assert(move _31, "index out of bounds: the length is {} but the index is {}", move _30, _29) -> bb16; // scope 6 at loop_simd.rs:84:20: 84:35
    }

    bb16: {
        _28 = (_5.0: [f32; 32])[_29];    // scope 6 at loop_simd.rs:84:20: 84:35
        _27 = f32::<impl f32>::sqrt(move _28) -> bb17; // scope 6 at loop_simd.rs:84:20: 84:42
                                         // mir::Constant
                                         // + span: loop_simd.rs:84:36: 84:40
                                         // + literal: Const { ty: fn(f32) -> f32 {std::f32::<impl f32>::sqrt}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_28);                // scope 6 at loop_simd.rs:84:41: 84:42
        _0 = Add(_0, move _27);          // scope 6 at loop_simd.rs:84:13: 84:42
        StorageDead(_27);                // scope 6 at loop_simd.rs:84:41: 84:42
        StorageDead(_29);                // scope 6 at loop_simd.rs:84:42: 84:43
        goto -> bb13;                    // scope 6 at loop_simd.rs:79:9: 85:10
    }
}
