// MIR for `func2` before PreCodegen

fn func2(_1: usize) -> f32 {
    debug len => _1;                     // in scope 0 at loop_simd.rs:120:10: 120:13
    let mut _2: usize;                   // in scope 0 at loop_simd.rs:125:9: 125:18
    let mut _4: [f32; _];                // in scope 0 at loop_simd.rs:127:41: 127:55
    let mut _6: [f32; _];                // in scope 0 at loop_simd.rs:128:40: 128:54
    let mut _8: bool;                    // in scope 0 at loop_simd.rs:134:20: 134:37
    let mut _9: usize;                   // in scope 0 at loop_simd.rs:134:20: 134:25
    let mut _10: bool;                   // in scope 0 at loop_simd.rs:137:20: 137:32
    let mut _11: usize;                  // in scope 0 at loop_simd.rs:137:20: 137:25
    let mut _12: usize;                  // in scope 0 at loop_simd.rs:137:29: 137:32
    let mut _13: usize;                  // in scope 0 at loop_simd.rs:140:33: 140:38
    let _14: usize;                      // in scope 0 at loop_simd.rs:140:24: 140:29
    let mut _15: usize;                  // in scope 0 at loop_simd.rs:140:17: 140:30
    let mut _16: bool;                   // in scope 0 at loop_simd.rs:140:17: 140:30
    let mut _17: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:144:21: 144:54
    let mut _18: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:144:30: 144:35
    let mut _19: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:144:37: 144:53
    let mut _20: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:144:48: 144:52
    let mut _21: bool;                   // in scope 0 at loop_simd.rs:146:12: 146:29
    let mut _22: usize;                  // in scope 0 at loop_simd.rs:146:12: 146:17
    let mut _23: f32;                    // in scope 0 at loop_simd.rs:147:20: 147:62
    let mut _24: loop_simd::func2::MySIMD<f32>; // in scope 0 at loop_simd.rs:147:56: 147:61
    let mut _26: bool;                   // in scope 0 at loop_simd.rs:151:16: 151:26
    let mut _27: usize;                  // in scope 0 at loop_simd.rs:151:16: 151:17
    let mut _28: usize;                  // in scope 0 at loop_simd.rs:151:21: 151:26
    let mut _29: f32;                    // in scope 0 at loop_simd.rs:154:20: 154:38
    let mut _30: f32;                    // in scope 0 at loop_simd.rs:154:20: 154:31
    let _31: usize;                      // in scope 0 at loop_simd.rs:154:28: 154:29
    let mut _32: usize;                  // in scope 0 at loop_simd.rs:154:20: 154:31
    let mut _33: bool;                   // in scope 0 at loop_simd.rs:154:20: 154:31
    scope 1 {
        debug index => _2;               // in scope 1 at loop_simd.rs:125:9: 125:18
        let mut _0: f32;                 // return place in scope 1 at loop_simd.rs:126:9: 126:16
        scope 2 {
            debug sum => _0;             // in scope 2 at loop_simd.rs:126:9: 126:16
            let mut _3: loop_simd::func2::MySIMD<f32>; // in scope 2 at loop_simd.rs:127:9: 127:18
            scope 3 {
                debug v_sum => _3;       // in scope 3 at loop_simd.rs:127:9: 127:18
                let mut _5: loop_simd::func2::MySIMD<f32>; // in scope 3 at loop_simd.rs:128:9: 128:17
                scope 4 {
                    debug temp => _5;    // in scope 4 at loop_simd.rs:128:9: 128:17
                    let mut _7: usize;   // in scope 4 at loop_simd.rs:129:9: 129:18
                    scope 5 {
                        debug inner => _7; // in scope 5 at loop_simd.rs:129:9: 129:18
                        scope 6 {
                            let mut _25: usize; // in scope 6 at loop_simd.rs:149:13: 149:18
                            scope 7 {
                                debug p => _25; // in scope 7 at loop_simd.rs:149:13: 149:18
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at loop_simd.rs:125:9: 125:18
        _2 = const 0_usize;              // scope 0 at loop_simd.rs:125:21: 125:22
        _0 = const 0f32;                 // scope 1 at loop_simd.rs:126:19: 126:21
        StorageLive(_3);                 // scope 2 at loop_simd.rs:127:9: 127:18
        StorageLive(_4);                 // scope 2 at loop_simd.rs:127:41: 127:55
        _4 = [const 0f32; SIMD_LEN];     // scope 2 at loop_simd.rs:127:41: 127:55
        (_3.0: [f32; _]) = move _4;      // scope 2 at loop_simd.rs:127:34: 127:56
        StorageDead(_4);                 // scope 2 at loop_simd.rs:127:55: 127:56
        StorageLive(_5);                 // scope 3 at loop_simd.rs:128:9: 128:17
        StorageLive(_6);                 // scope 3 at loop_simd.rs:128:40: 128:54
        _6 = [const 0f32; SIMD_LEN];     // scope 3 at loop_simd.rs:128:40: 128:54
        (_5.0: [f32; _]) = move _6;      // scope 3 at loop_simd.rs:128:33: 128:55
        StorageDead(_6);                 // scope 3 at loop_simd.rs:128:54: 128:55
        StorageLive(_7);                 // scope 4 at loop_simd.rs:129:9: 129:18
        goto -> bb1;                     // scope 6 at loop_simd.rs:131:9: 145:10
    }

    bb1: {
        _7 = const 0_usize;              // scope 6 at loop_simd.rs:132:13: 132:22
        goto -> bb2;                     // scope 6 at loop_simd.rs:133:13: 143:14
    }

    bb2: {
        StorageLive(_8);                 // scope 6 at loop_simd.rs:134:20: 134:37
        StorageLive(_9);                 // scope 6 at loop_simd.rs:134:20: 134:25
        _9 = _7;                         // scope 6 at loop_simd.rs:134:20: 134:25
        _8 = Ge(move _9, const SIMD_LEN); // scope 6 at loop_simd.rs:134:20: 134:37
        StorageDead(_9);                 // scope 6 at loop_simd.rs:134:36: 134:37
        switchInt(move _8) -> [false: bb4, otherwise: bb3]; // scope 6 at loop_simd.rs:134:20: 134:37
    }

    bb3: {
        StorageDead(_8);                 // scope 6 at loop_simd.rs:136:17: 136:18
        StorageLive(_17);                // scope 6 at loop_simd.rs:144:21: 144:54
        StorageLive(_18);                // scope 6 at loop_simd.rs:144:30: 144:35
        _18 = _3;                        // scope 6 at loop_simd.rs:144:30: 144:35
        StorageLive(_19);                // scope 6 at loop_simd.rs:144:37: 144:53
        StorageLive(_20);                // scope 6 at loop_simd.rs:144:48: 144:52
        _20 = _5;                        // scope 6 at loop_simd.rs:144:48: 144:52
        _19 = loop_simd::simd_fsqrt::<func2::MySIMD<f32>>(move _20) -> bb8; // scope 6 at loop_simd.rs:144:37: 144:53
                                         // mir::Constant
                                         // + span: loop_simd.rs:144:37: 144:47
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func2::MySIMD<f32>) -> loop_simd::func2::MySIMD<f32> {loop_simd::simd_fsqrt::<loop_simd::func2::MySIMD<f32>>}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_8);                 // scope 6 at loop_simd.rs:136:17: 136:18
        StorageLive(_10);                // scope 6 at loop_simd.rs:137:20: 137:32
        StorageLive(_11);                // scope 6 at loop_simd.rs:137:20: 137:25
        _11 = _2;                        // scope 6 at loop_simd.rs:137:20: 137:25
        StorageLive(_12);                // scope 6 at loop_simd.rs:137:29: 137:32
        _12 = _1;                        // scope 6 at loop_simd.rs:137:29: 137:32
        _10 = Ge(move _11, move _12);    // scope 6 at loop_simd.rs:137:20: 137:32
        StorageDead(_12);                // scope 6 at loop_simd.rs:137:31: 137:32
        StorageDead(_11);                // scope 6 at loop_simd.rs:137:31: 137:32
        switchInt(move _10) -> [false: bb6, otherwise: bb5]; // scope 6 at loop_simd.rs:137:20: 137:32
    }

    bb5: {
        StorageDead(_10);                // scope 6 at loop_simd.rs:139:17: 139:18
        StorageLive(_21);                // scope 6 at loop_simd.rs:146:12: 146:29
        StorageLive(_22);                // scope 6 at loop_simd.rs:146:12: 146:17
        _22 = _2;                        // scope 6 at loop_simd.rs:146:12: 146:17
        _21 = Ge(move _22, const SIMD_LEN); // scope 6 at loop_simd.rs:146:12: 146:29
        StorageDead(_22);                // scope 6 at loop_simd.rs:146:28: 146:29
        switchInt(move _21) -> [false: bb12, otherwise: bb10]; // scope 6 at loop_simd.rs:146:12: 146:29
    }

    bb6: {
        StorageDead(_10);                // scope 6 at loop_simd.rs:139:17: 139:18
        StorageLive(_13);                // scope 6 at loop_simd.rs:140:33: 140:38
        _13 = _2;                        // scope 6 at loop_simd.rs:140:33: 140:38
        StorageLive(_14);                // scope 6 at loop_simd.rs:140:24: 140:29
        _14 = _7;                        // scope 6 at loop_simd.rs:140:24: 140:29
        _15 = const 32_usize;            // scope 6 at loop_simd.rs:140:17: 140:30
        _16 = Lt(_14, _15);              // scope 6 at loop_simd.rs:140:17: 140:30
        assert(move _16, "index out of bounds: the length is {} but the index is {}", move _15, _14) -> bb7; // scope 6 at loop_simd.rs:140:17: 140:30
    }

    bb7: {
        (_5.0: [f32; 32])[_14] = move _13 as f32 (Misc); // scope 6 at loop_simd.rs:140:17: 140:45
        StorageDead(_13);                // scope 6 at loop_simd.rs:140:44: 140:45
        StorageDead(_14);                // scope 6 at loop_simd.rs:140:45: 140:46
        _2 = Add(_2, const 1_usize);     // scope 6 at loop_simd.rs:141:17: 141:27
        _7 = Add(_7, const 1_usize);     // scope 6 at loop_simd.rs:142:17: 142:27
        goto -> bb2;                     // scope 6 at loop_simd.rs:133:13: 143:14
    }

    bb8: {
        StorageDead(_20);                // scope 6 at loop_simd.rs:144:52: 144:53
        _17 = loop_simd::simd_add::<func2::MySIMD<f32>>(move _18, move _19) -> bb9; // scope 6 at loop_simd.rs:144:21: 144:54
                                         // mir::Constant
                                         // + span: loop_simd.rs:144:21: 144:29
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func2::MySIMD<f32>, loop_simd::func2::MySIMD<f32>) -> loop_simd::func2::MySIMD<f32> {loop_simd::simd_add::<loop_simd::func2::MySIMD<f32>>}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_19);                // scope 6 at loop_simd.rs:144:53: 144:54
        StorageDead(_18);                // scope 6 at loop_simd.rs:144:53: 144:54
        _3 = move _17;                   // scope 6 at loop_simd.rs:144:13: 144:54
        StorageDead(_17);                // scope 6 at loop_simd.rs:144:53: 144:54
        goto -> bb1;                     // scope 6 at loop_simd.rs:131:9: 145:10
    }

    bb10: {
        StorageLive(_23);                // scope 6 at loop_simd.rs:147:20: 147:62
        StorageLive(_24);                // scope 6 at loop_simd.rs:147:56: 147:61
        _24 = _3;                        // scope 6 at loop_simd.rs:147:56: 147:61
        _23 = loop_simd::simd_reduce_add_unordered::<func2::MySIMD<f32>, f32>(move _24) -> bb11; // scope 6 at loop_simd.rs:147:20: 147:62
                                         // mir::Constant
                                         // + span: loop_simd.rs:147:20: 147:55
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: unsafe extern "platform-intrinsic" fn(loop_simd::func2::MySIMD<f32>) -> f32 {loop_simd::simd_reduce_add_unordered::<loop_simd::func2::MySIMD<f32>, f32>}, val: Value(Scalar(<ZST>)) }
    }

    bb11: {
        StorageDead(_24);                // scope 6 at loop_simd.rs:147:61: 147:62
        _0 = Add(_0, move _23);          // scope 6 at loop_simd.rs:147:13: 147:62
        StorageDead(_23);                // scope 6 at loop_simd.rs:147:61: 147:62
        goto -> bb12;                    // scope 6 at loop_simd.rs:146:9: 148:10
    }

    bb12: {
        StorageDead(_21);                // scope 6 at loop_simd.rs:148:9: 148:10
        StorageLive(_25);                // scope 6 at loop_simd.rs:149:13: 149:18
        _25 = const 0_usize;             // scope 6 at loop_simd.rs:149:21: 149:22
        goto -> bb13;                    // scope 7 at loop_simd.rs:150:9: 156:10
    }

    bb13: {
        StorageLive(_26);                // scope 7 at loop_simd.rs:151:16: 151:26
        StorageLive(_27);                // scope 7 at loop_simd.rs:151:16: 151:17
        _27 = _25;                       // scope 7 at loop_simd.rs:151:16: 151:17
        StorageLive(_28);                // scope 7 at loop_simd.rs:151:21: 151:26
        _28 = _7;                        // scope 7 at loop_simd.rs:151:21: 151:26
        _26 = Ge(move _27, move _28);    // scope 7 at loop_simd.rs:151:16: 151:26
        StorageDead(_28);                // scope 7 at loop_simd.rs:151:25: 151:26
        StorageDead(_27);                // scope 7 at loop_simd.rs:151:25: 151:26
        switchInt(move _26) -> [false: bb15, otherwise: bb14]; // scope 7 at loop_simd.rs:151:16: 151:26
    }

    bb14: {
        StorageDead(_26);                // scope 7 at loop_simd.rs:153:13: 153:14
        StorageDead(_25);                // scope 6 at loop_simd.rs:157:5: 157:6
        StorageDead(_7);                 // scope 4 at loop_simd.rs:159:1: 159:2
        StorageDead(_5);                 // scope 3 at loop_simd.rs:159:1: 159:2
        StorageDead(_3);                 // scope 2 at loop_simd.rs:159:1: 159:2
        StorageDead(_2);                 // scope 0 at loop_simd.rs:159:1: 159:2
        return;                          // scope 0 at loop_simd.rs:159:2: 159:2
    }

    bb15: {
        StorageDead(_26);                // scope 7 at loop_simd.rs:153:13: 153:14
        StorageLive(_29);                // scope 7 at loop_simd.rs:154:20: 154:38
        StorageLive(_30);                // scope 7 at loop_simd.rs:154:20: 154:31
        StorageLive(_31);                // scope 7 at loop_simd.rs:154:28: 154:29
        _31 = _25;                       // scope 7 at loop_simd.rs:154:28: 154:29
        _32 = const 32_usize;            // scope 7 at loop_simd.rs:154:20: 154:31
        _33 = Lt(_31, _32);              // scope 7 at loop_simd.rs:154:20: 154:31
        assert(move _33, "index out of bounds: the length is {} but the index is {}", move _32, _31) -> bb16; // scope 7 at loop_simd.rs:154:20: 154:31
    }

    bb16: {
        _30 = (_5.0: [f32; 32])[_31];    // scope 7 at loop_simd.rs:154:20: 154:31
        _29 = f32::<impl f32>::sqrt(move _30) -> bb17; // scope 7 at loop_simd.rs:154:20: 154:38
                                         // mir::Constant
                                         // + span: loop_simd.rs:154:32: 154:36
                                         // + literal: Const { ty: fn(f32) -> f32 {std::f32::<impl f32>::sqrt}, val: Value(Scalar(<ZST>)) }
    }

    bb17: {
        StorageDead(_30);                // scope 7 at loop_simd.rs:154:37: 154:38
        _0 = Add(_0, move _29);          // scope 7 at loop_simd.rs:154:13: 154:38
        StorageDead(_29);                // scope 7 at loop_simd.rs:154:37: 154:38
        StorageDead(_31);                // scope 7 at loop_simd.rs:154:38: 154:39
        _25 = Add(_25, const 1_usize);   // scope 7 at loop_simd.rs:155:13: 155:19
        goto -> bb13;                    // scope 7 at loop_simd.rs:150:9: 156:10
    }
}
