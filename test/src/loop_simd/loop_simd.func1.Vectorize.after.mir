// MIR for `func1` after Vectorize

fn func1(_1: usize) -> f32 {
    debug len => _1;                     // in scope 0 at $DIR/loop_simd.rs:13:10: 13:13
    let mut _2: usize;                   // in scope 0 at $DIR/loop_simd.rs:14:9: 14:18
    let mut _3: bool;                    // in scope 0 at $DIR/loop_simd.rs:17:12: 17:24
    let mut _4: usize;                   // in scope 0 at $DIR/loop_simd.rs:17:12: 17:17
    let mut _5: usize;                   // in scope 0 at $DIR/loop_simd.rs:17:21: 17:24
    let mut _6: f32;                     // in scope 0 at $DIR/loop_simd.rs:20:16: 20:37
    let mut _7: f32;                     // in scope 0 at $DIR/loop_simd.rs:20:16: 20:30
    let mut _8: usize;                   // in scope 0 at $DIR/loop_simd.rs:20:17: 20:22
    let mut _10: usize;                  // in scope 0 at no-location
    let mut _11: usize;                  // in scope 0 at no-location
    let mut _12: usize;                  // in scope 0 at no-location
    let mut _13: bool;                   // in scope 0 at no-location
    let mut _14: [usize; 16];            // in scope 0 at no-location
    let mut _15: usize;                  // in scope 0 at no-location
    let mut _16: usize;                  // in scope 0 at no-location
    let mut _17: bool;                   // in scope 0 at no-location
    let mut _18: usize;                  // in scope 0 at no-location
    let mut _19: usize;                  // in scope 0 at no-location
    let mut _20: bool;                   // in scope 0 at no-location
    scope 1 {
        debug index => _2;               // in scope 1 at $DIR/loop_simd.rs:14:9: 14:18
        let mut _0: f32;                 // return place in scope 1 at $DIR/loop_simd.rs:15:9: 15:16
        scope 2 {
            debug sum => _0;             // in scope 2 at $DIR/loop_simd.rs:15:9: 15:16
            scope 3 (inlined f32::<impl f32>::sqrt) { // at $DIR/loop_simd.rs:20:16: 20:37
                debug self => _7;        // in scope 3 at $DIR/loop_simd.rs:20:16: 20:37
                let mut _9: f32;         // in scope 3 at $DIR/loop_simd.rs:20:16: 20:37
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at $DIR/loop_simd.rs:14:9: 14:18
        _2 = const 0_usize;              // scope 0 at $DIR/loop_simd.rs:14:21: 14:22
        _0 = const 0f32;                 // scope 1 at $DIR/loop_simd.rs:15:24: 15:26
        goto -> bb2;                     // scope 2 at $DIR/loop_simd.rs:16:5: 22:6
    }

    bb1: {
        StorageDead(_3);                 // scope 2 at $DIR/loop_simd.rs:19:9: 19:10
        StorageDead(_2);                 // scope 0 at $DIR/loop_simd.rs:24:1: 24:2
        return;                          // scope 0 at $DIR/loop_simd.rs:24:2: 24:2
    }

    bb2: {
        _10 = const 0_usize;             // scope 0 at no-location
        goto -> bb3;                     // scope 0 at no-location
    }

    bb3: {
        _12 = _10;                       // scope 0 at no-location
        _13 = Ge(move _12, const 16_usize); // scope 0 at no-location
        switchInt(move _13) -> [false: bb4, otherwise: bb6]; // scope 0 at no-location
    }

    bb4: {
        StorageLive(_3);                 // scope 2 at $DIR/loop_simd.rs:17:12: 17:24
        StorageLive(_4);                 // scope 2 at $DIR/loop_simd.rs:17:12: 17:17
        _4 = _2;                         // scope 2 at $DIR/loop_simd.rs:17:12: 17:17
        StorageLive(_5);                 // scope 2 at $DIR/loop_simd.rs:17:21: 17:24
        _5 = _1;                         // scope 2 at $DIR/loop_simd.rs:17:21: 17:24
        _3 = Ge(move _4, move _5);       // scope 2 at $DIR/loop_simd.rs:17:12: 17:24
        StorageDead(_5);                 // scope 2 at $DIR/loop_simd.rs:17:23: 17:24
        StorageDead(_4);                 // scope 2 at $DIR/loop_simd.rs:17:23: 17:24
        switchInt(move _3) -> [false: bb5, otherwise: bb10]; // scope 0 at no-location
    }

    bb5: {
        StorageDead(_3);                 // scope 2 at $DIR/loop_simd.rs:19:9: 19:10
        _14[_10] = _2;                   // scope 0 at no-location
        _2 = Add(_2, const 1_usize);     // scope 2 at $DIR/loop_simd.rs:21:9: 21:19
        _10 = Add(_10, const 1_usize);   // scope 0 at no-location
        goto -> bb3;                     // scope 0 at no-location
    }

    bb6: {
        _11 = const 0_usize;             // scope 0 at no-location
        goto -> bb7;                     // scope 0 at no-location
    }

    bb7: {
        _15 = _11;                       // scope 0 at no-location
        _16 = _10;                       // scope 0 at no-location
        _17 = Ge(move _15, move _16);    // scope 0 at no-location
        switchInt(move _17) -> [false: bb8, otherwise: bb2]; // scope 0 at no-location
    }

    bb8: {
        StorageLive(_6);                 // scope 0 at no-location
        StorageLive(_7);                 // scope 0 at no-location
        StorageLive(_8);                 // scope 0 at no-location
        _8 = _14[_11];                   // scope 0 at no-location
        _7 = move _8 as f32 (Misc);      // scope 0 at no-location
        StorageDead(_8);                 // scope 0 at no-location
        StorageLive(_9);                 // scope 0 at no-location
        _9 = _7;                         // scope 0 at no-location
        _6 = sqrtf32(move _9) -> bb9;    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: $DIR/loop_simd.rs:20:16: 20:37
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(f32) -> f32 {std::intrinsics::sqrtf32}, val: Value(Scalar(<ZST>)) }
    }

    bb9: {
        StorageDead(_9);                 // scope 0 at no-location
        StorageDead(_7);                 // scope 0 at no-location
        _0 = Add(_0, move _6);           // scope 0 at no-location
        StorageDead(_6);                 // scope 0 at no-location
        _11 = Add(_11, const 1_usize);   // scope 0 at no-location
        goto -> bb7;                     // scope 0 at no-location
    }

    bb10: {
        _11 = const 0_usize;             // scope 0 at no-location
        goto -> bb11;                    // scope 0 at no-location
    }

    bb11: {
        _18 = _11;                       // scope 0 at no-location
        _19 = _10;                       // scope 0 at no-location
        _20 = Ge(move _18, move _19);    // scope 0 at no-location
        switchInt(move _20) -> [false: bb12, otherwise: bb1]; // scope 0 at no-location
    }

    bb12: {
        StorageLive(_6);                 // scope 0 at no-location
        StorageLive(_7);                 // scope 0 at no-location
        StorageLive(_8);                 // scope 0 at no-location
        _8 = _14[_11];                   // scope 0 at no-location
        _7 = move _8 as f32 (Misc);      // scope 0 at no-location
        StorageDead(_8);                 // scope 0 at no-location
        StorageLive(_9);                 // scope 0 at no-location
        _9 = _7;                         // scope 0 at no-location
        _6 = sqrtf32(move _9) -> bb13;   // scope 0 at no-location
                                         // mir::Constant
                                         // + span: $DIR/loop_simd.rs:20:16: 20:37
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(f32) -> f32 {std::intrinsics::sqrtf32}, val: Value(Scalar(<ZST>)) }
    }

    bb13: {
        StorageDead(_9);                 // scope 0 at no-location
        StorageDead(_7);                 // scope 0 at no-location
        _0 = Add(_0, move _6);           // scope 0 at no-location
        StorageDead(_6);                 // scope 0 at no-location
        _11 = Add(_11, const 1_usize);   // scope 0 at no-location
        goto -> bb11;                    // scope 0 at no-location
    }
}
