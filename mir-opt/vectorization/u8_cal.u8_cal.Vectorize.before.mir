// MIR for `u8_cal` before Vectorize

fn u8_cal(_1: u64) -> u8 {
    debug len => _1;                     // in scope 0 at $DIR/u8_cal.rs:25:11: 25:14
    let mut _0: u8;                      // return place in scope 0 at $DIR/u8_cal.rs:26:9: 26:16
    let mut _2: std::ops::Range<u64>;    // in scope 0 at $DIR/u8_cal.rs:27:18: 27:24
    let mut _3: std::ops::Range<u64>;    // in scope 0 at $DIR/u8_cal.rs:27:18: 27:24
    let mut _4: u64;                     // in scope 0 at $DIR/u8_cal.rs:27:21: 27:24
    let mut _6: std::option::Option<u64>; // in scope 0 at $DIR/u8_cal.rs:27:18: 27:24
    let mut _7: &mut std::ops::Range<u64>; // in scope 0 at $DIR/u8_cal.rs:27:18: 27:24
    let mut _8: &mut std::ops::Range<u64>; // in scope 0 at $DIR/u8_cal.rs:27:18: 27:24
    let mut _9: isize;                   // in scope 0 at $DIR/u8_cal.rs:27:5: 31:6
    let mut _12: u64;                    // in scope 0 at $DIR/u8_cal.rs:28:20: 28:25
    let mut _13: u8;                     // in scope 0 at $DIR/u8_cal.rs:29:16: 29:33
    let mut _14: u8;                     // in scope 0 at $DIR/u8_cal.rs:29:16: 29:27
    let mut _15: u8;                     // in scope 0 at $DIR/u8_cal.rs:29:17: 29:21
    let mut _16: u8;                     // in scope 0 at $DIR/u8_cal.rs:30:16: 30:26
    let mut _17: u8;                     // in scope 0 at $DIR/u8_cal.rs:30:16: 30:20
    scope 1 {
        debug ans => _0;                 // in scope 1 at $DIR/u8_cal.rs:26:9: 26:16
        let mut _5: std::ops::Range<u64>; // in scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        scope 2 {
            debug iter => _5;            // in scope 2 at $DIR/u8_cal.rs:27:18: 27:24
            let _10: u64;                // in scope 2 at $DIR/u8_cal.rs:27:9: 27:14
            scope 3 {
                debug index => _10;      // in scope 3 at $DIR/u8_cal.rs:27:9: 27:14
                let _11: u8;             // in scope 3 at $DIR/u8_cal.rs:28:13: 28:17
                scope 4 {
                    debug byte => _11;   // in scope 4 at $DIR/u8_cal.rs:28:13: 28:17
                }
            }
            scope 6 (inlined iter::range::<impl Iterator for std::ops::Range<u64>>::next) { // at $DIR/u8_cal.rs:27:18: 27:24
                debug self => _7;        // in scope 6 at $DIR/u8_cal.rs:27:18: 27:24
                let mut _18: &mut std::ops::Range<u64>; // in scope 6 at $DIR/u8_cal.rs:27:18: 27:24
            }
        }
        scope 5 (inlined <std::ops::Range<u64> as IntoIterator>::into_iter) { // at $DIR/u8_cal.rs:27:18: 27:24
            debug self => _3;            // in scope 5 at $DIR/u8_cal.rs:27:18: 27:24
        }
    }

    bb0: {
        _0 = const 0_u8;                 // scope 0 at $DIR/u8_cal.rs:26:23: 26:24
        StorageLive(_2);                 // scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        StorageLive(_3);                 // scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        StorageLive(_4);                 // scope 1 at $DIR/u8_cal.rs:27:21: 27:24
        _4 = _1;                         // scope 1 at $DIR/u8_cal.rs:27:21: 27:24
        (_3.0: u64) = const 0_u64;       // scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        (_3.1: u64) = move _4;           // scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        StorageDead(_4);                 // scope 1 at $DIR/u8_cal.rs:27:23: 27:24
        _2 = move _3;                    // scope 5 at $DIR/u8_cal.rs:27:18: 27:24
        StorageDead(_3);                 // scope 1 at $DIR/u8_cal.rs:27:23: 27:24
        StorageLive(_5);                 // scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        _5 = move _2;                    // scope 1 at $DIR/u8_cal.rs:27:18: 27:24
        goto -> bb1;                     // scope 2 at $DIR/u8_cal.rs:27:5: 31:6
    }

    bb1: {
        StorageLive(_6);                 // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
        StorageLive(_7);                 // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
        StorageLive(_8);                 // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
        _8 = &mut _5;                    // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
        _7 = &mut (*_8);                 // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
        StorageLive(_18);                // scope 6 at $DIR/u8_cal.rs:27:18: 27:24
        _18 = &mut (*_7);                // scope 6 at $DIR/u8_cal.rs:27:18: 27:24
        _6 = <std::ops::Range<u64> as iter::range::RangeIteratorImpl>::spec_next(move _18) -> bb4; // scope 6 at $DIR/u8_cal.rs:27:18: 27:24
                                         // mir::Constant
                                         // + span: $DIR/u8_cal.rs:27:18: 27:24
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<u64>) -> std::option::Option<<std::ops::Range<u64> as std::iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<u64> as std::iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageLive(_10);                // scope 2 at $DIR/u8_cal.rs:27:9: 27:14
        _10 = ((_6 as Some).0: u64);     // scope 2 at $DIR/u8_cal.rs:27:9: 27:14
        StorageLive(_11);                // scope 3 at $DIR/u8_cal.rs:28:13: 28:17
        StorageLive(_12);                // scope 3 at $DIR/u8_cal.rs:28:20: 28:25
        _12 = _10;                       // scope 3 at $DIR/u8_cal.rs:28:20: 28:25
        _11 = move _12 as u8 (Misc);     // scope 3 at $DIR/u8_cal.rs:28:20: 28:31
        StorageDead(_12);                // scope 3 at $DIR/u8_cal.rs:28:30: 28:31
        StorageLive(_13);                // scope 4 at $DIR/u8_cal.rs:29:16: 29:33
        StorageLive(_14);                // scope 4 at $DIR/u8_cal.rs:29:16: 29:27
        StorageLive(_15);                // scope 4 at $DIR/u8_cal.rs:29:17: 29:21
        _15 = _11;                       // scope 4 at $DIR/u8_cal.rs:29:17: 29:21
        _14 = Shr(move _15, const 4_i32); // scope 4 at $DIR/u8_cal.rs:29:16: 29:27
        StorageDead(_15);                // scope 4 at $DIR/u8_cal.rs:29:26: 29:27
        _13 = BitAnd(move _14, const 15_u8); // scope 4 at $DIR/u8_cal.rs:29:16: 29:33
        StorageDead(_14);                // scope 4 at $DIR/u8_cal.rs:29:32: 29:33
        _0 = Add(_0, move _13);          // scope 4 at $DIR/u8_cal.rs:29:9: 29:33
        StorageDead(_13);                // scope 4 at $DIR/u8_cal.rs:29:32: 29:33
        StorageLive(_16);                // scope 4 at $DIR/u8_cal.rs:30:16: 30:26
        StorageLive(_17);                // scope 4 at $DIR/u8_cal.rs:30:16: 30:20
        _17 = _11;                       // scope 4 at $DIR/u8_cal.rs:30:16: 30:20
        _16 = BitAnd(move _17, const 15_u8); // scope 4 at $DIR/u8_cal.rs:30:16: 30:26
        StorageDead(_17);                // scope 4 at $DIR/u8_cal.rs:30:25: 30:26
        _0 = Add(_0, move _16);          // scope 4 at $DIR/u8_cal.rs:30:9: 30:26
        StorageDead(_16);                // scope 4 at $DIR/u8_cal.rs:30:25: 30:26
        StorageDead(_11);                // scope 3 at $DIR/u8_cal.rs:31:5: 31:6
        StorageDead(_10);                // scope 2 at $DIR/u8_cal.rs:31:5: 31:6
        StorageDead(_8);                 // scope 2 at $DIR/u8_cal.rs:31:5: 31:6
        StorageDead(_6);                 // scope 2 at $DIR/u8_cal.rs:31:5: 31:6
        goto -> bb1;                     // scope 2 at $DIR/u8_cal.rs:27:5: 31:6
    }

    bb3: {
        StorageDead(_8);                 // scope 2 at $DIR/u8_cal.rs:31:5: 31:6
        StorageDead(_6);                 // scope 2 at $DIR/u8_cal.rs:31:5: 31:6
        StorageDead(_5);                 // scope 1 at $DIR/u8_cal.rs:31:5: 31:6
        StorageDead(_2);                 // scope 1 at $DIR/u8_cal.rs:31:5: 31:6
        return;                          // scope 0 at $DIR/u8_cal.rs:33:2: 33:2
    }

    bb4: {
        StorageDead(_18);                // scope 6 at $DIR/u8_cal.rs:27:18: 27:24
        StorageDead(_7);                 // scope 2 at $DIR/u8_cal.rs:27:23: 27:24
        _9 = discriminant(_6);           // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
        switchInt(move _9) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/u8_cal.rs:27:18: 27:24
    }
}
