// MIR for `func1` before Vectorize

fn func1(_1: usize) -> f32 {
    debug len => _1;                     // in scope 0 at $DIR/loop_simd.rs:24:10: 24:13
    let mut _2: usize;                   // in scope 0 at $DIR/loop_simd.rs:25:9: 25:18
    let mut _3: bool;                    // in scope 0 at $DIR/loop_simd.rs:28:12: 28:24
    let mut _4: usize;                   // in scope 0 at $DIR/loop_simd.rs:28:12: 28:17
    let mut _5: usize;                   // in scope 0 at $DIR/loop_simd.rs:28:21: 28:24
    let mut _6: f32;                     // in scope 0 at $DIR/loop_simd.rs:31:16: 31:37
    let mut _7: f32;                     // in scope 0 at $DIR/loop_simd.rs:31:16: 31:30
    let mut _8: usize;                   // in scope 0 at $DIR/loop_simd.rs:31:17: 31:22
    scope 1 {
        debug index => _2;               // in scope 1 at $DIR/loop_simd.rs:25:9: 25:18
        let mut _0: f32;                 // return place in scope 1 at $DIR/loop_simd.rs:26:9: 26:16
        scope 2 {
            debug sum => _0;             // in scope 2 at $DIR/loop_simd.rs:26:9: 26:16
            scope 3 (inlined f32::<impl f32>::sqrt) { // at $DIR/loop_simd.rs:31:16: 31:37
                debug self => _7;        // in scope 3 at $DIR/loop_simd.rs:31:16: 31:37
                let mut _9: f32;         // in scope 3 at $DIR/loop_simd.rs:31:16: 31:37
                scope 4 {
                }
            }
        }
    }

    bb0: {
        StorageLive(_2);                 // scope 0 at $DIR/loop_simd.rs:25:9: 25:18
        _2 = const 0_usize;              // scope 0 at $DIR/loop_simd.rs:25:21: 25:22
        _0 = const 0f32;                 // scope 1 at $DIR/loop_simd.rs:26:24: 26:26
        goto -> bb1;                     // scope 2 at $DIR/loop_simd.rs:27:5: 33:6
    }

    bb1: {
        StorageLive(_3);                 // scope 2 at $DIR/loop_simd.rs:28:12: 28:24
        StorageLive(_4);                 // scope 2 at $DIR/loop_simd.rs:28:12: 28:17
        _4 = _2;                         // scope 2 at $DIR/loop_simd.rs:28:12: 28:17
        StorageLive(_5);                 // scope 2 at $DIR/loop_simd.rs:28:21: 28:24
        _5 = _1;                         // scope 2 at $DIR/loop_simd.rs:28:21: 28:24
        _3 = Ge(move _4, move _5);       // scope 2 at $DIR/loop_simd.rs:28:12: 28:24
        StorageDead(_5);                 // scope 2 at $DIR/loop_simd.rs:28:23: 28:24
        StorageDead(_4);                 // scope 2 at $DIR/loop_simd.rs:28:23: 28:24
        switchInt(move _3) -> [false: bb3, otherwise: bb2]; // scope 2 at $DIR/loop_simd.rs:28:12: 28:24
    }

    bb2: {
        StorageDead(_3);                 // scope 2 at $DIR/loop_simd.rs:30:9: 30:10
        StorageDead(_2);                 // scope 0 at $DIR/loop_simd.rs:35:1: 35:2
        return;                          // scope 0 at $DIR/loop_simd.rs:35:2: 35:2
    }

    bb3: {
        StorageDead(_3);                 // scope 2 at $DIR/loop_simd.rs:30:9: 30:10
        StorageLive(_6);                 // scope 2 at $DIR/loop_simd.rs:31:16: 31:37
        StorageLive(_7);                 // scope 2 at $DIR/loop_simd.rs:31:16: 31:30
        StorageLive(_8);                 // scope 2 at $DIR/loop_simd.rs:31:17: 31:22
        _8 = _2;                         // scope 2 at $DIR/loop_simd.rs:31:17: 31:22
        _7 = move _8 as f32 (Misc);      // scope 2 at $DIR/loop_simd.rs:31:16: 31:30
        StorageDead(_8);                 // scope 2 at $DIR/loop_simd.rs:31:29: 31:30
        StorageLive(_9);                 // scope 4 at $DIR/loop_simd.rs:31:16: 31:37
        _9 = _7;                         // scope 4 at $DIR/loop_simd.rs:31:16: 31:37
        _6 = sqrtf32(move _9) -> bb4;    // scope 4 at $DIR/loop_simd.rs:31:16: 31:37
                                         // mir::Constant
                                         // + span: $DIR/loop_simd.rs:31:16: 31:37
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(f32) -> f32 {std::intrinsics::sqrtf32}, val: Value(Scalar(<ZST>)) }
    }

    bb4: {
        StorageDead(_9);                 // scope 4 at $DIR/loop_simd.rs:31:16: 31:37
        StorageDead(_7);                 // scope 2 at $DIR/loop_simd.rs:31:36: 31:37
        _0 = Add(_0, move _6);           // scope 2 at $DIR/loop_simd.rs:31:9: 31:37
        StorageDead(_6);                 // scope 2 at $DIR/loop_simd.rs:31:36: 31:37
        _2 = Add(_2, const 1_usize);     // scope 2 at $DIR/loop_simd.rs:32:9: 32:19
        goto -> bb1;                     // scope 2 at $DIR/loop_simd.rs:27:5: 33:6
    }
}
