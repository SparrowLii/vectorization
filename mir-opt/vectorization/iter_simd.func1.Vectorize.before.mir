// MIR for `func1` before Vectorize

fn func1(_1: &[u8], _2: &[u32], _3: &mut [u32]) -> () {
    debug src => _1;                     // in scope 0 at $DIR/iter_simd.rs:16:10: 16:13
    debug src2 => _2;                    // in scope 0 at $DIR/iter_simd.rs:16:22: 16:26
    debug val => _3;                     // in scope 0 at $DIR/iter_simd.rs:16:36: 16:39
    let mut _0: ();                      // return place in scope 0 at $DIR/iter_simd.rs:16:53: 16:53
    let mut _4: u32;                     // in scope 0 at $DIR/iter_simd.rs:17:9: 17:16
    let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/iter_simd.rs:18:14: 18:26
    let mut _6: std::ops::Range<usize>;  // in scope 0 at $DIR/iter_simd.rs:18:14: 18:26
    let mut _7: usize;                   // in scope 0 at $DIR/iter_simd.rs:18:17: 18:26
    let mut _8: &[u8];                   // in scope 0 at $DIR/iter_simd.rs:18:17: 18:26
    let mut _10: std::option::Option<usize>; // in scope 0 at $DIR/iter_simd.rs:18:14: 18:26
    let mut _11: &mut std::ops::Range<usize>; // in scope 0 at $DIR/iter_simd.rs:18:14: 18:26
    let mut _12: &mut std::ops::Range<usize>; // in scope 0 at $DIR/iter_simd.rs:18:14: 18:26
    let mut _13: isize;                  // in scope 0 at $DIR/iter_simd.rs:18:5: 22:6
    let mut _16: u8;                     // in scope 0 at $DIR/iter_simd.rs:19:17: 19:23
    let _17: usize;                      // in scope 0 at $DIR/iter_simd.rs:19:21: 19:22
    let mut _18: usize;                  // in scope 0 at $DIR/iter_simd.rs:19:17: 19:23
    let mut _19: bool;                   // in scope 0 at $DIR/iter_simd.rs:19:17: 19:23
    let mut _20: u32;                    // in scope 0 at $DIR/iter_simd.rs:20:16: 20:21
    let mut _21: u32;                    // in scope 0 at $DIR/iter_simd.rs:20:16: 20:17
    let mut _22: u32;                    // in scope 0 at $DIR/iter_simd.rs:20:20: 20:21
    let mut _23: u32;                    // in scope 0 at $DIR/iter_simd.rs:21:18: 21:25
    let _24: usize;                      // in scope 0 at $DIR/iter_simd.rs:21:23: 21:24
    let mut _25: usize;                  // in scope 0 at $DIR/iter_simd.rs:21:18: 21:25
    let mut _26: bool;                   // in scope 0 at $DIR/iter_simd.rs:21:18: 21:25
    let mut _27: u32;                    // in scope 0 at $DIR/iter_simd.rs:21:28: 21:31
    let _28: usize;                      // in scope 0 at $DIR/iter_simd.rs:21:13: 21:14
    let mut _29: usize;                  // in scope 0 at $DIR/iter_simd.rs:21:9: 21:15
    let mut _30: bool;                   // in scope 0 at $DIR/iter_simd.rs:21:9: 21:15
    scope 1 {
        debug sum => _4;                 // in scope 1 at $DIR/iter_simd.rs:17:9: 17:16
        let mut _9: std::ops::Range<usize>; // in scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        scope 2 {
            debug iter => _9;            // in scope 2 at $DIR/iter_simd.rs:18:14: 18:26
            let _14: usize;              // in scope 2 at $DIR/iter_simd.rs:18:9: 18:10
            scope 3 {
                debug x => _14;          // in scope 3 at $DIR/iter_simd.rs:18:9: 18:10
                let _15: u32;            // in scope 3 at $DIR/iter_simd.rs:19:13: 19:14
                scope 4 {
                    debug v => _15;      // in scope 4 at $DIR/iter_simd.rs:19:13: 19:14
                }
            }
            scope 6 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/iter_simd.rs:18:14: 18:26
                debug self => _11;       // in scope 6 at $DIR/iter_simd.rs:18:14: 18:26
                let mut _31: &mut std::ops::Range<usize>; // in scope 6 at $DIR/iter_simd.rs:18:14: 18:26
            }
        }
        scope 5 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/iter_simd.rs:18:14: 18:26
            debug self => _6;            // in scope 5 at $DIR/iter_simd.rs:18:14: 18:26
        }
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at $DIR/iter_simd.rs:17:9: 17:16
        _4 = const 0_u32;                // scope 0 at $DIR/iter_simd.rs:17:19: 17:20
        StorageLive(_5);                 // scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        StorageLive(_6);                 // scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        StorageLive(_7);                 // scope 1 at $DIR/iter_simd.rs:18:17: 18:26
        StorageLive(_8);                 // scope 1 at $DIR/iter_simd.rs:18:17: 18:26
        _8 = _1;                         // scope 1 at $DIR/iter_simd.rs:18:17: 18:26
        _7 = Len((*_8));                 // scope 1 at $DIR/iter_simd.rs:18:17: 18:26
        StorageDead(_8);                 // scope 1 at $DIR/iter_simd.rs:18:25: 18:26
        (_6.0: usize) = const 0_usize;   // scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        (_6.1: usize) = move _7;         // scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        StorageDead(_7);                 // scope 1 at $DIR/iter_simd.rs:18:25: 18:26
        _5 = move _6;                    // scope 5 at $DIR/iter_simd.rs:18:14: 18:26
        StorageDead(_6);                 // scope 1 at $DIR/iter_simd.rs:18:25: 18:26
        StorageLive(_9);                 // scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        _9 = move _5;                    // scope 1 at $DIR/iter_simd.rs:18:14: 18:26
        goto -> bb1;                     // scope 2 at $DIR/iter_simd.rs:18:5: 22:6
    }

    bb1: {
        StorageLive(_10);                // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
        StorageLive(_11);                // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
        StorageLive(_12);                // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
        _12 = &mut _9;                   // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
        _11 = &mut (*_12);               // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
        StorageLive(_31);                // scope 6 at $DIR/iter_simd.rs:18:14: 18:26
        _31 = &mut (*_11);               // scope 6 at $DIR/iter_simd.rs:18:14: 18:26
        _10 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(move _31) -> bb7; // scope 6 at $DIR/iter_simd.rs:18:14: 18:26
                                         // mir::Constant
                                         // + span: $DIR/iter_simd.rs:18:14: 18:26
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<usize>) -> std::option::Option<<std::ops::Range<usize> as std::iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as std::iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }
    }

    bb2: {
        StorageLive(_14);                // scope 2 at $DIR/iter_simd.rs:18:9: 18:10
        _14 = ((_10 as Some).0: usize);  // scope 2 at $DIR/iter_simd.rs:18:9: 18:10
        StorageLive(_15);                // scope 3 at $DIR/iter_simd.rs:19:13: 19:14
        StorageLive(_16);                // scope 3 at $DIR/iter_simd.rs:19:17: 19:23
        StorageLive(_17);                // scope 3 at $DIR/iter_simd.rs:19:21: 19:22
        _17 = _14;                       // scope 3 at $DIR/iter_simd.rs:19:21: 19:22
        _18 = Len((*_1));                // scope 3 at $DIR/iter_simd.rs:19:17: 19:23
        _19 = Lt(_17, _18);              // scope 3 at $DIR/iter_simd.rs:19:17: 19:23
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb4; // scope 3 at $DIR/iter_simd.rs:19:17: 19:23
    }

    bb3: {
        StorageDead(_12);                // scope 2 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_10);                // scope 2 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_9);                 // scope 1 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_5);                 // scope 1 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_4);                 // scope 0 at $DIR/iter_simd.rs:23:1: 23:2
        return;                          // scope 0 at $DIR/iter_simd.rs:23:2: 23:2
    }

    bb4: {
        _16 = (*_1)[_17];                // scope 3 at $DIR/iter_simd.rs:19:17: 19:23
        _15 = move _16 as u32 (Misc);    // scope 3 at $DIR/iter_simd.rs:19:17: 19:30
        StorageDead(_16);                // scope 3 at $DIR/iter_simd.rs:19:29: 19:30
        StorageDead(_17);                // scope 3 at $DIR/iter_simd.rs:19:30: 19:31
        StorageLive(_20);                // scope 4 at $DIR/iter_simd.rs:20:16: 20:21
        StorageLive(_21);                // scope 4 at $DIR/iter_simd.rs:20:16: 20:17
        _21 = _15;                       // scope 4 at $DIR/iter_simd.rs:20:16: 20:17
        StorageLive(_22);                // scope 4 at $DIR/iter_simd.rs:20:20: 20:21
        _22 = _15;                       // scope 4 at $DIR/iter_simd.rs:20:20: 20:21
        _20 = Mul(move _21, move _22);   // scope 4 at $DIR/iter_simd.rs:20:16: 20:21
        StorageDead(_22);                // scope 4 at $DIR/iter_simd.rs:20:20: 20:21
        StorageDead(_21);                // scope 4 at $DIR/iter_simd.rs:20:20: 20:21
        _4 = Add(_4, move _20);          // scope 4 at $DIR/iter_simd.rs:20:9: 20:21
        StorageDead(_20);                // scope 4 at $DIR/iter_simd.rs:20:20: 20:21
        StorageLive(_23);                // scope 4 at $DIR/iter_simd.rs:21:18: 21:25
        StorageLive(_24);                // scope 4 at $DIR/iter_simd.rs:21:23: 21:24
        _24 = _14;                       // scope 4 at $DIR/iter_simd.rs:21:23: 21:24
        _25 = Len((*_2));                // scope 4 at $DIR/iter_simd.rs:21:18: 21:25
        _26 = Lt(_24, _25);              // scope 4 at $DIR/iter_simd.rs:21:18: 21:25
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb5; // scope 4 at $DIR/iter_simd.rs:21:18: 21:25
    }

    bb5: {
        _23 = (*_2)[_24];                // scope 4 at $DIR/iter_simd.rs:21:18: 21:25
        StorageLive(_27);                // scope 4 at $DIR/iter_simd.rs:21:28: 21:31
        _27 = _4;                        // scope 4 at $DIR/iter_simd.rs:21:28: 21:31
        StorageLive(_28);                // scope 4 at $DIR/iter_simd.rs:21:13: 21:14
        _28 = _14;                       // scope 4 at $DIR/iter_simd.rs:21:13: 21:14
        _29 = Len((*_3));                // scope 4 at $DIR/iter_simd.rs:21:9: 21:15
        _30 = Lt(_28, _29);              // scope 4 at $DIR/iter_simd.rs:21:9: 21:15
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb6; // scope 4 at $DIR/iter_simd.rs:21:9: 21:15
    }

    bb6: {
        (*_3)[_28] = Add(move _23, move _27); // scope 4 at $DIR/iter_simd.rs:21:9: 21:31
        StorageDead(_27);                // scope 4 at $DIR/iter_simd.rs:21:30: 21:31
        StorageDead(_23);                // scope 4 at $DIR/iter_simd.rs:21:30: 21:31
        StorageDead(_28);                // scope 4 at $DIR/iter_simd.rs:21:31: 21:32
        StorageDead(_24);                // scope 4 at $DIR/iter_simd.rs:21:31: 21:32
        StorageDead(_15);                // scope 3 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_14);                // scope 2 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_12);                // scope 2 at $DIR/iter_simd.rs:22:5: 22:6
        StorageDead(_10);                // scope 2 at $DIR/iter_simd.rs:22:5: 22:6
        goto -> bb1;                     // scope 2 at $DIR/iter_simd.rs:18:5: 22:6
    }

    bb7: {
        StorageDead(_31);                // scope 6 at $DIR/iter_simd.rs:18:14: 18:26
        StorageDead(_11);                // scope 2 at $DIR/iter_simd.rs:18:25: 18:26
        _13 = discriminant(_10);         // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
        switchInt(move _13) -> [0_isize: bb3, otherwise: bb2]; // scope 2 at $DIR/iter_simd.rs:18:14: 18:26
    }
}
