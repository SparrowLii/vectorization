// MIR for `func1` after Vectorize

fn func1(_1: &[f32]) -> f32 {
    debug arr => _1;                     // in scope 0 at $DIR/sum.rs:34:10: 34:13
    let mut _0: f32;                     // return place in scope 0 at $DIR/sum.rs:35:9: 35:16
    let mut _2: std::slice::Iter<f32>;   // in scope 0 at $DIR/sum.rs:36:14: 36:17
    let mut _3: &[f32];                  // in scope 0 at $DIR/sum.rs:36:14: 36:17
    let mut _5: std::option::Option<&f32>; // in scope 0 at $DIR/sum.rs:36:14: 36:17
    let mut _6: &mut std::slice::Iter<f32>; // in scope 0 at $DIR/sum.rs:36:14: 36:17
    let mut _7: &mut std::slice::Iter<f32>; // in scope 0 at $DIR/sum.rs:36:14: 36:17
    let mut _8: isize;                   // in scope 0 at $DIR/sum.rs:36:5: 38:6
    let mut _10: f32;                    // in scope 0 at $DIR/sum.rs:37:16: 37:18
    let mut _13: usize;                  // in scope 0 at no-location
    let mut _14: [&f32; 32];             // in scope 0 at no-location
    let mut _15: [f32; 32];              // in scope 0 at no-location
    let mut _16: [f32; 32];              // in scope 0 at no-location
    let mut _17: usize;                  // in scope 0 at no-location
    let mut _18: bool;                   // in scope 0 at no-location
    let mut _19: usize;                  // in scope 0 at no-location
    let mut _20: bool;                   // in scope 0 at no-location
    let mut _21: usize;                  // in scope 0 at no-location
    let mut _22: usize;                  // in scope 0 at no-location
    let mut _23: usize;                  // in scope 0 at no-location
    let mut _24: bool;                   // in scope 0 at no-location
    scope 1 {
        debug sum => _0;                 // in scope 1 at $DIR/sum.rs:35:9: 35:16
        let mut _4: std::slice::Iter<f32>; // in scope 1 at $DIR/sum.rs:36:14: 36:17
        scope 2 {
            debug iter => _4;            // in scope 2 at $DIR/sum.rs:36:14: 36:17
            let _9: &f32;                // in scope 2 at $DIR/sum.rs:36:9: 36:10
            scope 3 {
                debug i => _9;           // in scope 3 at $DIR/sum.rs:36:9: 36:10
            }
        }
        scope 4 (inlined core::slice::iter::<impl IntoIterator for &[f32]>::into_iter) { // at $DIR/sum.rs:36:14: 36:17
            debug self => _3;            // in scope 4 at $DIR/sum.rs:36:14: 36:17
            let mut _11: &[f32];         // in scope 4 at $DIR/sum.rs:36:14: 36:17
            scope 5 (inlined core::slice::<impl [f32]>::iter) { // at $DIR/sum.rs:36:14: 36:17
                debug self => _11;       // in scope 5 at $DIR/sum.rs:36:14: 36:17
                let mut _12: &[f32];     // in scope 5 at $DIR/sum.rs:36:14: 36:17
            }
        }
    }

    bb0: {
        _0 = const 0f32;                 // scope 0 at $DIR/sum.rs:35:19: 35:21
        StorageLive(_2);                 // scope 1 at $DIR/sum.rs:36:14: 36:17
        StorageLive(_3);                 // scope 1 at $DIR/sum.rs:36:14: 36:17
        _3 = _1;                         // scope 1 at $DIR/sum.rs:36:14: 36:17
        StorageLive(_11);                // scope 4 at $DIR/sum.rs:36:14: 36:17
        _11 = _3;                        // scope 4 at $DIR/sum.rs:36:14: 36:17
        StorageLive(_12);                // scope 5 at $DIR/sum.rs:36:14: 36:17
        _12 = _11;                       // scope 5 at $DIR/sum.rs:36:14: 36:17
        _2 = std::slice::Iter::<f32>::new(move _12) -> bb2; // scope 5 at $DIR/sum.rs:36:14: 36:17
                                         // mir::Constant
                                         // + span: $DIR/sum.rs:36:14: 36:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[f32]) -> std::slice::Iter<f32> {std::slice::Iter::<f32>::new}, val: Value(Scalar(<ZST>)) }
    }

    bb1: {
        StorageDead(_7);                 // scope 2 at $DIR/sum.rs:38:5: 38:6
        StorageDead(_5);                 // scope 2 at $DIR/sum.rs:38:5: 38:6
        StorageDead(_4);                 // scope 1 at $DIR/sum.rs:38:5: 38:6
        StorageDead(_2);                 // scope 1 at $DIR/sum.rs:38:5: 38:6
        return;                          // scope 0 at $DIR/sum.rs:40:2: 40:2
    }

    bb2: {
        StorageDead(_12);                // scope 5 at $DIR/sum.rs:36:14: 36:17
        StorageDead(_11);                // scope 4 at $DIR/sum.rs:36:14: 36:17
        StorageDead(_3);                 // scope 1 at $DIR/sum.rs:36:16: 36:17
        StorageLive(_4);                 // scope 1 at $DIR/sum.rs:36:14: 36:17
        _4 = move _2;                    // scope 1 at $DIR/sum.rs:36:14: 36:17
        _15 = [const 0f32; 32];          // scope 0 at no-location
        goto -> bb3;                     // scope 2 at $DIR/sum.rs:36:5: 38:6
    }

    bb3: {
        _13 = const 0_usize;             // scope 0 at no-location
        goto -> bb4;                     // scope 0 at no-location
    }

    bb4: {
        _17 = _13;                       // scope 0 at no-location
        _18 = Ge(move _17, const 32_usize); // scope 0 at no-location
        switchInt(move _18) -> [false: bb5, otherwise: bb8]; // scope 0 at no-location
    }

    bb5: {
        StorageLive(_5);                 // scope 2 at $DIR/sum.rs:36:14: 36:17
        StorageLive(_6);                 // scope 2 at $DIR/sum.rs:36:14: 36:17
        StorageLive(_7);                 // scope 2 at $DIR/sum.rs:36:14: 36:17
        _7 = &mut _4;                    // scope 0 at no-location
        _6 = &mut (*_7);                 // scope 0 at no-location
        _5 = <std::slice::Iter<f32> as Iterator>::next(move _6) -> bb6; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: $DIR/sum.rs:36:14: 36:17
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::slice::Iter<f32>) -> std::option::Option<<std::slice::Iter<f32> as std::iter::Iterator>::Item> {<std::slice::Iter<f32> as std::iter::Iterator>::next}, val: Value(Scalar(<ZST>)) }
    }

    bb6: {
        StorageDead(_6);                 // scope 2 at $DIR/sum.rs:36:16: 36:17
        _8 = discriminant(_5);           // scope 0 at no-location
        switchInt(move _8) -> [0_isize: bb13, otherwise: bb7]; // scope 0 at no-location
    }

    bb7: {
        _14[_13] = ((_5 as Some).0: &f32); // scope 0 at no-location
        StorageDead(_5);                 // scope 2 at $DIR/sum.rs:38:5: 38:6
        _13 = Add(_13, const 1_usize);   // scope 0 at no-location
        goto -> bb4;                     // scope 0 at no-location
    }

    bb8: {
        StorageLive(_9);                 // scope 0 at no-location
        StorageLive(_10);                // scope 0 at no-location
        _13 = const 0_usize;             // scope 0 at no-location
        goto -> bb9;                     // scope 0 at no-location
    }

    bb9: {
        _19 = _13;                       // scope 0 at no-location
        _20 = Ge(move _19, const 32_usize); // scope 0 at no-location
        switchInt(move _20) -> [false: bb10, otherwise: bb11]; // scope 0 at no-location
    }

    bb10: {
        _16[_13] = (*_14[_13]);          // scope 0 at no-location
        _13 = Add(_13, const 1_usize);   // scope 0 at no-location
        goto -> bb9;                     // scope 0 at no-location
    }

    bb11: {
        _15 = "simd_add"(_15, move _16) -> bb12; // scope 0 at no-location
    }

    bb12: {
        StorageDead(_10);                // scope 0 at no-location
        StorageDead(_9);                 // scope 0 at no-location
        StorageDead(_7);                 // scope 0 at no-location
        goto -> bb3;                     // scope 0 at no-location
    }

    bb13: {
        _0 = "simd_reduce_add_unordered"(move _15) -> bb14; // scope 0 at no-location
    }

    bb14: {
        _21 = const 0_usize;             // scope 0 at no-location
        goto -> bb15;                    // scope 0 at no-location
    }

    bb15: {
        _22 = _21;                       // scope 0 at no-location
        _23 = _13;                       // scope 0 at no-location
        _24 = Ge(move _22, move _23);    // scope 0 at no-location
        switchInt(move _24) -> [false: bb16, otherwise: bb1]; // scope 0 at no-location
    }

    bb16: {
        StorageLive(_9);                 // scope 0 at no-location
        StorageLive(_10);                // scope 0 at no-location
        _10 = (*_14[_21]);               // scope 0 at no-location
        _0 = Add(_0, move _10);          // scope 0 at no-location
        StorageDead(_10);                // scope 0 at no-location
        StorageDead(_9);                 // scope 0 at no-location
        StorageDead(_7);                 // scope 0 at no-location
        _21 = Add(_21, const 1_usize);   // scope 0 at no-location
        goto -> bb15;                    // scope 0 at no-location
    }
}
