// MIR for `func1` after Vectorize

fn func1(_1: &[u8], _2: &[u32], _3: &mut [u32]) -> () {
    debug src => _1;                     // in scope 0 at $DIR/iter_simd.rs:35:10: 35:13
    debug src2 => _2;                    // in scope 0 at $DIR/iter_simd.rs:35:22: 35:26
    debug val => _3;                     // in scope 0 at $DIR/iter_simd.rs:35:36: 35:39
    let mut _0: ();                      // return place in scope 0 at $DIR/iter_simd.rs:35:53: 35:53
    let mut _4: u32;                     // in scope 0 at $DIR/iter_simd.rs:36:9: 36:16
    let mut _5: std::ops::Range<usize>;  // in scope 0 at $DIR/iter_simd.rs:37:14: 37:26
    let mut _6: std::ops::Range<usize>;  // in scope 0 at $DIR/iter_simd.rs:37:14: 37:26
    let mut _7: usize;                   // in scope 0 at $DIR/iter_simd.rs:37:17: 37:26
    let mut _8: &[u8];                   // in scope 0 at $DIR/iter_simd.rs:37:17: 37:26
    let mut _10: std::option::Option<usize>; // in scope 0 at $DIR/iter_simd.rs:37:14: 37:26
    let mut _11: &mut std::ops::Range<usize>; // in scope 0 at $DIR/iter_simd.rs:37:14: 37:26
    let mut _12: &mut std::ops::Range<usize>; // in scope 0 at $DIR/iter_simd.rs:37:14: 37:26
    let mut _13: isize;                  // in scope 0 at $DIR/iter_simd.rs:37:5: 41:6
    let mut _16: u8;                     // in scope 0 at $DIR/iter_simd.rs:38:17: 38:23
    let _17: usize;                      // in scope 0 at $DIR/iter_simd.rs:38:21: 38:22
    let mut _18: usize;                  // in scope 0 at $DIR/iter_simd.rs:38:17: 38:23
    let mut _19: bool;                   // in scope 0 at $DIR/iter_simd.rs:38:17: 38:23
    let mut _20: u32;                    // in scope 0 at $DIR/iter_simd.rs:39:16: 39:21
    let mut _21: u32;                    // in scope 0 at $DIR/iter_simd.rs:39:16: 39:17
    let mut _22: u32;                    // in scope 0 at $DIR/iter_simd.rs:39:20: 39:21
    let mut _23: u32;                    // in scope 0 at $DIR/iter_simd.rs:40:18: 40:25
    let _24: usize;                      // in scope 0 at $DIR/iter_simd.rs:40:23: 40:24
    let mut _25: usize;                  // in scope 0 at $DIR/iter_simd.rs:40:18: 40:25
    let mut _26: bool;                   // in scope 0 at $DIR/iter_simd.rs:40:18: 40:25
    let mut _27: u32;                    // in scope 0 at $DIR/iter_simd.rs:40:28: 40:31
    let _28: usize;                      // in scope 0 at $DIR/iter_simd.rs:40:13: 40:14
    let mut _29: usize;                  // in scope 0 at $DIR/iter_simd.rs:40:9: 40:15
    let mut _30: bool;                   // in scope 0 at $DIR/iter_simd.rs:40:9: 40:15
    let mut _32: usize;                  // in scope 0 at no-location
    let mut _33: [usize; 16];            // in scope 0 at no-location
    let mut _34: [u8; 16];               // in scope 0 at no-location
    let mut _35: [usize; 16];            // in scope 0 at no-location
    let mut _36: [u32; 16];              // in scope 0 at no-location
    let mut _37: [u32; 16];              // in scope 0 at no-location
    let mut _38: [u32; 16];              // in scope 0 at no-location
    let mut _39: [u32; 16];              // in scope 0 at no-location
    let mut _40: [u32; 16];              // in scope 0 at no-location
    let mut _41: [usize; 16];            // in scope 0 at no-location
    let mut _42: [u32; 16];              // in scope 0 at no-location
    let mut _43: [usize; 16];            // in scope 0 at no-location
    let mut _44: [u32; 16];              // in scope 0 at no-location
    let mut _45: [u32; 16];              // in scope 0 at no-location
    let mut _46: usize;                  // in scope 0 at no-location
    let mut _47: bool;                   // in scope 0 at no-location
    let mut _48: usize;                  // in scope 0 at no-location
    let mut _49: bool;                   // in scope 0 at no-location
    let mut _50: *const u8;              // in scope 0 at no-location
    let mut _51: *const u8;              // in scope 0 at no-location
    let mut _52: *mut [u8; 16];          // in scope 0 at no-location
    let mut _53: *mut u8;                // in scope 0 at no-location
    let mut _54: usize;                  // in scope 0 at no-location
    let mut _55: bool;                   // in scope 0 at no-location
    let mut _56: usize;                  // in scope 0 at no-location
    let mut _57: bool;                   // in scope 0 at no-location
    let mut _58: *const u32;             // in scope 0 at no-location
    let mut _59: *const u8;              // in scope 0 at no-location
    let mut _60: *mut [u32; 16];         // in scope 0 at no-location
    let mut _61: *mut u8;                // in scope 0 at no-location
    let mut _62: usize;                  // in scope 0 at no-location
    let mut _63: bool;                   // in scope 0 at no-location
    let mut _64: *const u32;             // in scope 0 at no-location
    let mut _65: *const u8;              // in scope 0 at no-location
    let mut _66: *mut u32;               // in scope 0 at no-location
    let mut _67: *mut u8;                // in scope 0 at no-location
    let mut _68: usize;                  // in scope 0 at no-location
    let mut _69: usize;                  // in scope 0 at no-location
    let mut _70: usize;                  // in scope 0 at no-location
    let mut _71: bool;                   // in scope 0 at no-location
    scope 1 {
        debug sum => _4;                 // in scope 1 at $DIR/iter_simd.rs:36:9: 36:16
        let mut _9: std::ops::Range<usize>; // in scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        scope 2 {
            debug iter => _9;            // in scope 2 at $DIR/iter_simd.rs:37:14: 37:26
            let _14: usize;              // in scope 2 at $DIR/iter_simd.rs:37:9: 37:10
            scope 3 {
                debug x => _14;          // in scope 3 at $DIR/iter_simd.rs:37:9: 37:10
                let _15: u32;            // in scope 3 at $DIR/iter_simd.rs:38:13: 38:14
                scope 4 {
                    debug v => _15;      // in scope 4 at $DIR/iter_simd.rs:38:13: 38:14
                }
            }
            scope 6 (inlined iter::range::<impl Iterator for std::ops::Range<usize>>::next) { // at $DIR/iter_simd.rs:37:14: 37:26
                debug self => _11;       // in scope 6 at $DIR/iter_simd.rs:37:14: 37:26
                let mut _31: &mut std::ops::Range<usize>; // in scope 6 at $DIR/iter_simd.rs:37:14: 37:26
            }
        }
        scope 5 (inlined <std::ops::Range<usize> as IntoIterator>::into_iter) { // at $DIR/iter_simd.rs:37:14: 37:26
            debug self => _6;            // in scope 5 at $DIR/iter_simd.rs:37:14: 37:26
        }
    }

    bb0: {
        StorageLive(_4);                 // scope 0 at $DIR/iter_simd.rs:36:9: 36:16
        _4 = const 0_u32;                // scope 0 at $DIR/iter_simd.rs:36:19: 36:20
        StorageLive(_5);                 // scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        StorageLive(_6);                 // scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        StorageLive(_7);                 // scope 1 at $DIR/iter_simd.rs:37:17: 37:26
        StorageLive(_8);                 // scope 1 at $DIR/iter_simd.rs:37:17: 37:26
        _8 = _1;                         // scope 1 at $DIR/iter_simd.rs:37:17: 37:26
        _7 = Len((*_8));                 // scope 1 at $DIR/iter_simd.rs:37:17: 37:26
        StorageDead(_8);                 // scope 1 at $DIR/iter_simd.rs:37:25: 37:26
        (_6.0: usize) = const 0_usize;   // scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        (_6.1: usize) = move _7;         // scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        StorageDead(_7);                 // scope 1 at $DIR/iter_simd.rs:37:25: 37:26
        _5 = move _6;                    // scope 5 at $DIR/iter_simd.rs:37:14: 37:26
        StorageDead(_6);                 // scope 1 at $DIR/iter_simd.rs:37:25: 37:26
        StorageLive(_9);                 // scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        _9 = move _5;                    // scope 1 at $DIR/iter_simd.rs:37:14: 37:26
        goto -> bb2;                     // scope 2 at $DIR/iter_simd.rs:37:5: 41:6
    }

    bb1: {
        StorageDead(_12);                // scope 2 at $DIR/iter_simd.rs:41:5: 41:6
        StorageDead(_10);                // scope 2 at $DIR/iter_simd.rs:41:5: 41:6
        StorageDead(_9);                 // scope 1 at $DIR/iter_simd.rs:41:5: 41:6
        StorageDead(_5);                 // scope 1 at $DIR/iter_simd.rs:41:5: 41:6
        StorageDead(_4);                 // scope 0 at $DIR/iter_simd.rs:42:1: 42:2
        return;                          // scope 0 at $DIR/iter_simd.rs:42:2: 42:2
    }

    bb2: {
        _32 = const 0_usize;             // scope 0 at no-location
        goto -> bb3;                     // scope 0 at no-location
    }

    bb3: {
        _46 = _32;                       // scope 0 at no-location
        _47 = Ge(move _46, const 16_usize); // scope 0 at no-location
        switchInt(move _47) -> [false: bb4, otherwise: bb7]; // scope 0 at no-location
    }

    bb4: {
        StorageLive(_10);                // scope 2 at $DIR/iter_simd.rs:37:14: 37:26
        StorageLive(_11);                // scope 2 at $DIR/iter_simd.rs:37:14: 37:26
        StorageLive(_12);                // scope 2 at $DIR/iter_simd.rs:37:14: 37:26
        _12 = &mut _9;                   // scope 0 at no-location
        _11 = &mut (*_12);               // scope 0 at no-location
        StorageLive(_31);                // scope 6 at $DIR/iter_simd.rs:37:14: 37:26
        _31 = &mut (*_11);               // scope 0 at no-location
        _10 = <std::ops::Range<usize> as iter::range::RangeIteratorImpl>::spec_next(move _31) -> bb5; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: $DIR/iter_simd.rs:37:14: 37:26
                                         // + literal: Const { ty: for<'r> fn(&'r mut std::ops::Range<usize>) -> std::option::Option<<std::ops::Range<usize> as std::iter::range::RangeIteratorImpl>::Item> {<std::ops::Range<usize> as std::iter::range::RangeIteratorImpl>::spec_next}, val: Value(Scalar(<ZST>)) }
    }

    bb5: {
        StorageDead(_31);                // scope 6 at $DIR/iter_simd.rs:37:14: 37:26
        StorageDead(_11);                // scope 2 at $DIR/iter_simd.rs:37:25: 37:26
        _13 = discriminant(_10);         // scope 0 at no-location
        switchInt(move _13) -> [0_isize: bb26, otherwise: bb6]; // scope 0 at no-location
    }

    bb6: {
        _33[_32] = ((_10 as Some).0: usize); // scope 0 at no-location
        StorageDead(_10);                // scope 2 at $DIR/iter_simd.rs:41:5: 41:6
        _32 = Add(_32, const 1_usize);   // scope 0 at no-location
        goto -> bb3;                     // scope 0 at no-location
    }

    bb7: {
        StorageLive(_14);                // scope 0 at no-location
        StorageLive(_15);                // scope 0 at no-location
        StorageLive(_16);                // scope 0 at no-location
        StorageLive(_17);                // scope 0 at no-location
        _35 = _33;                       // scope 0 at no-location
        _32 = const 0_usize;             // scope 0 at no-location
        goto -> bb8;                     // scope 0 at no-location
    }

    bb8: {
        _48 = _32;                       // scope 0 at no-location
        _49 = Ge(move _48, const 16_usize); // scope 0 at no-location
        switchInt(move _49) -> [false: bb9, otherwise: bb11]; // scope 0 at no-location
    }

    bb9: {
        _18 = Len((*_1));                // scope 0 at no-location
        _19 = Lt(_35[_32], _18);         // scope 0 at no-location
        _17 = _35[_32];                  // scope 0 at no-location
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb10; // scope 0 at no-location
    }

    bb10: {
        _32 = Add(_32, const 1_usize);   // scope 0 at no-location
        goto -> bb8;                     // scope 0 at no-location
    }

    bb11: {
        _32 = const 0_usize;             // scope 0 at no-location
        _17 = move _35[_32];             // scope 0 at no-location
        _50 = &raw const (*_1)[_17];     // scope 0 at no-location
        _51 = move _50 as *const u8 (Misc); // scope 0 at no-location
        _52 = &raw mut _34;              // scope 0 at no-location
        _53 = move _52 as *mut u8 (Misc); // scope 0 at no-location
        copy_nonoverlapping(src=move _51, dst=move _53, count=const 16_usize); // scope 0 at no-location
        _36 = "simd_cast"(move _34) -> bb12; // scope 0 at no-location
    }

    bb12: {
        StorageDead(_16);                // scope 0 at no-location
        StorageDead(_17);                // scope 0 at no-location
        StorageLive(_20);                // scope 0 at no-location
        StorageLive(_21);                // scope 0 at no-location
        _38 = _36;                       // scope 0 at no-location
        StorageLive(_22);                // scope 0 at no-location
        _39 = _36;                       // scope 0 at no-location
        _37 = "simd_mul"(move _38, move _39) -> bb13; // scope 0 at no-location
    }

    bb13: {
        StorageDead(_22);                // scope 0 at no-location
        StorageDead(_21);                // scope 0 at no-location
        _32 = const 0_usize;             // scope 0 at no-location
        goto -> bb14;                    // scope 0 at no-location
    }

    bb14: {
        _54 = _32;                       // scope 0 at no-location
        _55 = Ge(move _54, const 16_usize); // scope 0 at no-location
        switchInt(move _55) -> [false: bb15, otherwise: bb16]; // scope 0 at no-location
    }

    bb15: {
        _4 = Add(_4, move _37[_32]);     // scope 0 at no-location
        _45[_32] = _4;                   // scope 0 at no-location
        _32 = Add(_32, const 1_usize);   // scope 0 at no-location
        goto -> bb14;                    // scope 0 at no-location
    }

    bb16: {
        StorageDead(_20);                // scope 0 at no-location
        StorageLive(_23);                // scope 0 at no-location
        StorageLive(_24);                // scope 0 at no-location
        _41 = _33;                       // scope 0 at no-location
        _32 = const 0_usize;             // scope 0 at no-location
        goto -> bb17;                    // scope 0 at no-location
    }

    bb17: {
        _56 = _32;                       // scope 0 at no-location
        _57 = Ge(move _56, const 16_usize); // scope 0 at no-location
        switchInt(move _57) -> [false: bb18, otherwise: bb20]; // scope 0 at no-location
    }

    bb18: {
        _25 = Len((*_2));                // scope 0 at no-location
        _26 = Lt(_41[_32], _25);         // scope 0 at no-location
        _24 = _41[_32];                  // scope 0 at no-location
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb19; // scope 0 at no-location
    }

    bb19: {
        _32 = Add(_32, const 1_usize);   // scope 0 at no-location
        goto -> bb17;                    // scope 0 at no-location
    }

    bb20: {
        _32 = const 0_usize;             // scope 0 at no-location
        _24 = move _41[_32];             // scope 0 at no-location
        _58 = &raw const (*_2)[_24];     // scope 0 at no-location
        _59 = move _58 as *const u8 (Misc); // scope 0 at no-location
        _60 = &raw mut _40;              // scope 0 at no-location
        _61 = move _60 as *mut u8 (Misc); // scope 0 at no-location
        copy_nonoverlapping(src=move _59, dst=move _61, count=const 64_usize); // scope 0 at no-location
        StorageLive(_27);                // scope 0 at no-location
        _44 = _45;                       // scope 0 at no-location
        StorageLive(_28);                // scope 0 at no-location
        _43 = _33;                       // scope 0 at no-location
        _32 = const 0_usize;             // scope 0 at no-location
        goto -> bb21;                    // scope 0 at no-location
    }

    bb21: {
        _62 = _32;                       // scope 0 at no-location
        _63 = Ge(move _62, const 16_usize); // scope 0 at no-location
        switchInt(move _63) -> [false: bb22, otherwise: bb24]; // scope 0 at no-location
    }

    bb22: {
        _29 = Len((*_3));                // scope 0 at no-location
        _30 = Lt(_43[_32], _29);         // scope 0 at no-location
        _28 = _43[_32];                  // scope 0 at no-location
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb23; // scope 0 at no-location
    }

    bb23: {
        _32 = Add(_32, const 1_usize);   // scope 0 at no-location
        goto -> bb21;                    // scope 0 at no-location
    }

    bb24: {
        _42 = "simd_add"(move _40, move _44) -> bb25; // scope 0 at no-location
    }

    bb25: {
        _32 = const 0_usize;             // scope 0 at no-location
        _28 = _43[_32];                  // scope 0 at no-location
        _64 = &raw const _42[_32];       // scope 0 at no-location
        _65 = move _64 as *const u8 (Misc); // scope 0 at no-location
        _66 = &raw mut (*_3)[_28];       // scope 0 at no-location
        _67 = move _66 as *mut u8 (Misc); // scope 0 at no-location
        copy_nonoverlapping(src=move _65, dst=move _67, count=const 64_usize); // scope 0 at no-location
        StorageDead(_27);                // scope 0 at no-location
        StorageDead(_23);                // scope 0 at no-location
        StorageDead(_28);                // scope 0 at no-location
        StorageDead(_24);                // scope 0 at no-location
        StorageDead(_15);                // scope 0 at no-location
        StorageDead(_14);                // scope 0 at no-location
        StorageDead(_12);                // scope 0 at no-location
        goto -> bb2;                     // scope 0 at no-location
    }

    bb26: {
        _68 = const 0_usize;             // scope 0 at no-location
        goto -> bb27;                    // scope 0 at no-location
    }

    bb27: {
        _69 = _68;                       // scope 0 at no-location
        _70 = _32;                       // scope 0 at no-location
        _71 = Ge(move _69, move _70);    // scope 0 at no-location
        switchInt(move _71) -> [false: bb28, otherwise: bb1]; // scope 0 at no-location
    }

    bb28: {
        StorageLive(_14);                // scope 0 at no-location
        StorageLive(_15);                // scope 0 at no-location
        StorageLive(_16);                // scope 0 at no-location
        StorageLive(_17);                // scope 0 at no-location
        _17 = _33[_68];                  // scope 0 at no-location
        _18 = Len((*_1));                // scope 0 at no-location
        _19 = Lt(_17, _18);              // scope 0 at no-location
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb29; // scope 0 at no-location
    }

    bb29: {
        _16 = (*_1)[_17];                // scope 0 at no-location
        _15 = move _16 as u32 (Misc);    // scope 0 at no-location
        StorageDead(_16);                // scope 0 at no-location
        StorageDead(_17);                // scope 0 at no-location
        StorageLive(_20);                // scope 0 at no-location
        StorageLive(_21);                // scope 0 at no-location
        _21 = _15;                       // scope 0 at no-location
        StorageLive(_22);                // scope 0 at no-location
        _22 = _15;                       // scope 0 at no-location
        _20 = Mul(move _21, move _22);   // scope 0 at no-location
        StorageDead(_22);                // scope 0 at no-location
        StorageDead(_21);                // scope 0 at no-location
        _4 = Add(_4, move _20);          // scope 0 at no-location
        StorageDead(_20);                // scope 0 at no-location
        StorageLive(_23);                // scope 0 at no-location
        StorageLive(_24);                // scope 0 at no-location
        _24 = _33[_68];                  // scope 0 at no-location
        _25 = Len((*_2));                // scope 0 at no-location
        _26 = Lt(_24, _25);              // scope 0 at no-location
        assert(move _26, "index out of bounds: the length is {} but the index is {}", move _25, _24) -> bb30; // scope 0 at no-location
    }

    bb30: {
        _23 = (*_2)[_24];                // scope 0 at no-location
        StorageLive(_27);                // scope 0 at no-location
        _27 = _4;                        // scope 0 at no-location
        StorageLive(_28);                // scope 0 at no-location
        _28 = _33[_68];                  // scope 0 at no-location
        _29 = Len((*_3));                // scope 0 at no-location
        _30 = Lt(_28, _29);              // scope 0 at no-location
        assert(move _30, "index out of bounds: the length is {} but the index is {}", move _29, _28) -> bb31; // scope 0 at no-location
    }

    bb31: {
        (*_3)[_28] = Add(move _23, move _27); // scope 0 at no-location
        StorageDead(_27);                // scope 0 at no-location
        StorageDead(_23);                // scope 0 at no-location
        StorageDead(_28);                // scope 0 at no-location
        StorageDead(_24);                // scope 0 at no-location
        StorageDead(_15);                // scope 0 at no-location
        StorageDead(_14);                // scope 0 at no-location
        StorageDead(_12);                // scope 0 at no-location
        _68 = Add(_68, const 1_usize);   // scope 0 at no-location
        goto -> bb27;                    // scope 0 at no-location
    }
}
